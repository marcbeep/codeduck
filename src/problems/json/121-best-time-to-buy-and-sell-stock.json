{
  "id": 121,
  "title": "Best Time to Buy and Sell Stock",
  "list": ["blind75"],
  "category": "Array",
  "topics": ["Array", "Dynamic Programming"],
  "difficulty": "Easy",
  "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
  "constraints": ["1 <= prices.length <= 105", "0 <= prices[i] <= 104"],
  "testCases": [
    {
      "input": {
        "prices": [7, 1, 5, 3, 6, 4]
      },
      "output": 5,
      "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
    },
    {
      "input": {
        "prices": [7, 6, 4, 3, 1]
      },
      "output": 0,
      "explanation": "In this case, no transactions are done and the max profit = 0."
    },
    {
      "input": {
        "prices": [1, 2, 3, 4, 5]
      },
      "output": 4,
      "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4."
    }
  ],
  "solution": {
    "code": "def max_profit(prices: list[int]) -> int:\n    if not prices:\n        return 0\n    \n    min_price = prices[0]\n    max_profit = 0\n    \n    for price in prices:\n        # Update minimum price seen so far\n        min_price = min(min_price, price)\n        # Calculate potential profit if we sell at current price\n        current_profit = price - min_price\n        # Update maximum profit\n        max_profit = max(max_profit, current_profit)\n    \n    return max_profit",
    "explanation": "This solution uses a single pass approach:\n1. Keep track of the minimum price seen so far\n2. For each price, calculate the potential profit if we sell at that price\n3. Update the maximum profit if the current profit is higher\n\nThe time complexity is O(n) as we only need one pass through the array. The space complexity is O(1) as we only use a constant amount of extra space."
  }
}
