{
  "id": 743,
  "title": "Network Delay Time",
  "list": ["neetcode150", "marc30"],
  "category": "Advanced Graphs",
  "difficulty": "Medium",
  "description": "You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.",
  "constraints": [
    "1 <= k <= n <= 100",
    "1 <= times.length <= 6000",
    "times[i].length == 3",
    "1 <= ui, vi <= n",
    "ui != vi",
    "0 <= wi <= 100",
    "All the pairs (ui, vi) are unique"
  ],
  "testCases": [
    {
      "input": {
        "times": [
          [2, 1, 1],
          [2, 3, 1],
          [3, 4, 1]
        ],
        "n": 4,
        "k": 2
      },
      "output": 2,
      "explanation": "Signal starts at node 2. It takes 1 time unit to reach node 1, and 2 time units to reach node 4."
    },
    {
      "input": {
        "times": [[1, 2, 1]],
        "n": 2,
        "k": 1
      },
      "output": 1,
      "explanation": "Signal takes 1 time unit to reach node 2."
    },
    {
      "input": {
        "times": [[1, 2, 1]],
        "n": 2,
        "k": 2
      },
      "output": -1,
      "explanation": "Node 2 cannot send a signal to node 1."
    }
  ],
  "solution": {
    "code": "import heapq\n\ndef networkDelayTime(times: list[list[int]], n: int, k: int) -> int:\n    # Build adjacency list\n    graph = [[] for _ in range(n + 1)]\n    for u, v, w in times:\n        graph[u].append((v, w))\n    \n    # Dijkstra's algorithm\n    distances = [float('inf')] * (n + 1)\n    distances[k] = 0\n    \n    # Priority queue: (distance, node)\n    pq = [(0, k)]\n    \n    while pq:\n        dist, node = heapq.heappop(pq)\n        \n        # If we've already found a shorter path, skip\n        if dist > distances[node]:\n            continue\n        \n        # Check all neighbors\n        for neighbor, weight in graph[node]:\n            new_dist = dist + weight\n            if new_dist < distances[neighbor]:\n                distances[neighbor] = new_dist\n                heapq.heappush(pq, (new_dist, neighbor))\n    \n    # Find maximum distance (time for all nodes to receive signal)\n    max_time = max(distances[1:n+1])\n    return max_time if max_time != float('inf') else -1",
    "explanation": "This solution uses Dijkstra's algorithm to find shortest paths:\n1. Build an adjacency list representation of the graph\n2. Use a priority queue to always process the node with minimum distance\n3. For each node, relax all its neighbors if we find a shorter path\n4. Return the maximum distance as the time for all nodes to receive the signal\n\nThe time complexity is O((V + E) log V) where V is the number of vertices and E is the number of edges. The space complexity is O(V + E) for the graph representation and priority queue."
  }
}
