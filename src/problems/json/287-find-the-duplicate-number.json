{
  "id": 287,
  "title": "Find The Duplicate Number",
  "list": ["neetcode150"],
  "category": "Linked List",
  "difficulty": "Medium",
  "description": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.",
  "constraints": [
    "1 <= n <= 105",
    "nums.length == n + 1",
    "1 <= nums[i] <= n",
    "All the integers in nums appear only once except for precisely one integer which appears two or more times"
  ],
  "testCases": [
    {
      "input": {
        "nums": [1, 3, 4, 2, 2]
      },
      "output": 2,
      "explanation": "The duplicate number is 2."
    },
    {
      "input": {
        "nums": [3, 1, 3, 4, 2]
      },
      "output": 3,
      "explanation": "The duplicate number is 3."
    },
    {
      "input": {
        "nums": [1, 1]
      },
      "output": 1,
      "explanation": "The duplicate number is 1."
    },
    {
      "input": {
        "nums": [1, 1, 2]
      },
      "output": 1,
      "explanation": "The duplicate number is 1."
    }
  ],
  "solution": {
    "code": "def findDuplicate(nums):\n    # Floyd's Tortoise and Hare (Cycle Detection)\n    # Treat the array as a linked list where nums[i] points to nums[nums[i]]\n    \n    # Phase 1: Find the intersection point\n    slow = fast = nums[0]\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    \n    # Phase 2: Find the entrance to the cycle\n    slow = nums[0]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    \n    return slow",
    "explanation": "Treat the array as a linked list where nums[i] points to nums[nums[i]]. The duplicate creates a cycle. Use Floyd's algorithm to find the cycle entrance.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\nKey insight: Floyd's algorithm is the most elegant solution that meets all constraints."
  }
}
