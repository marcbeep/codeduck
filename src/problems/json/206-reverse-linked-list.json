{
  "id": 206,
  "title": "Reverse Linked List",
  "list": ["grind75", "neetcode150", "marc30"],
  "category": "Linked List",
  "difficulty": "Easy",
  "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
  "constraints": [
    "The number of nodes in the list is the range [0, 5000]",
    "-5000 <= Node.val <= 5000"
  ],
  "testCases": [
    {
      "input": {
        "head": [1, 2, 3, 4, 5]
      },
      "output": [5, 4, 3, 2, 1],
      "explanation": "The linked list is reversed: 1->2->3->4->5 becomes 5->4->3->2->1."
    },
    {
      "input": {
        "head": [1, 2]
      },
      "output": [2, 1],
      "explanation": "The linked list is reversed: 1->2 becomes 2->1."
    },
    {
      "input": {
        "head": []
      },
      "output": [],
      "explanation": "An empty linked list remains empty."
    },
    {
      "input": {
        "head": [1]
      },
      "output": [1],
      "explanation": "A single node linked list remains the same."
    }
  ],
  "solution": {
    "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\ndef reverse_list(head):\n    # Iterative approach\n    prev = None\n    current = head\n    \n    while current:\n        # Store the next node\n        next_node = current.next\n        \n        # Reverse the link\n        current.next = prev\n        \n        # Move prev and current one step forward\n        prev = current\n        current = next_node\n    \n    return prev",
    "explanation": "Use three pointers: prev, current, and next_node. Iterate through the list, reversing each link.\n\nTime complexity: O(n) where n is the number of nodes\nSpace complexity: O(1) - only uses a constant amount of extra space\n\nThe iterative approach is the most efficient and commonly used solution for this problem."
  }
}
