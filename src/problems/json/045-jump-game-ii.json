{
  "id": 45,
  "title": "Jump Game II",
  "list": ["neetcode150"],
  "category": "Greedy",
  "difficulty": "Medium",
  "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n\nEach element nums[i] represents the maximum jump length from position i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n0 <= j <= nums[i] and\ni + j < n\n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].",
  "constraints": ["1 <= nums.length <= 104", "0 <= nums[i] <= 1000"],
  "testCases": [
    {
      "input": {
        "nums": [2, 3, 1, 1, 4]
      },
      "output": 2,
      "explanation": "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
    },
    {
      "input": {
        "nums": [2, 3, 0, 1, 4]
      },
      "output": 2,
      "explanation": "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
    },
    {
      "input": {
        "nums": [1, 2, 3]
      },
      "output": 2,
      "explanation": "Jump 1 step from index 0 to 1, then 1 step to the last index."
    }
  ],
  "solution": {
    "code": "def jump(nums: list[int]) -> int:\n    if len(nums) <= 1:\n        return 0\n    \n    jumps = 0\n    current_end = 0\n    farthest = 0\n    \n    for i in range(len(nums) - 1):\n        # Update the farthest position we can reach\n        farthest = max(farthest, i + nums[i])\n        \n        # If we've reached the end of current jump range\n        if i == current_end:\n            jumps += 1\n            current_end = farthest\n            \n            # If we can reach the last index\n            if current_end >= len(nums) - 1:\n                break\n    \n    return jumps",
    "explanation": "This solution uses a greedy approach with O(n) time complexity:\n1. Keep track of the current jump range (current_end) and farthest reachable position\n2. For each position, update the farthest position we can reach\n3. When we reach the end of current jump range, increment jump count and update range\n4. Stop when we can reach the last index\n\nThe key insight is that we only need to jump when we reach the boundary of our current reach, and we always jump to the position that gives us the maximum reach."
  }
}
