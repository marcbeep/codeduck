{
  "id": 746,
  "title": "Min Cost Climbing Stairs",
  "list": ["neetcode150"],
  "category": "1-D DP",
  "difficulty": "Easy",
  "description": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\nYou can either start from the step with index 0, or the step with index 1.\n\nReturn the minimum cost to reach the top of the floor.",
  "constraints": ["2 <= cost.length <= 1000", "0 <= cost[i] <= 999"],
  "testCases": [
    {
      "input": {
        "cost": [10, 15, 20]
      },
      "output": 15,
      "explanation": "You will start at index 1, pay 15 and climb two steps to reach the top. The total cost is 15."
    },
    {
      "input": {
        "cost": [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
      },
      "output": 6,
      "explanation": "You will start at index 0, pay 1 and climb two steps to reach index 2, then pay 1 and climb two steps to reach index 4, then pay 1 and climb two steps to reach index 6, then pay 1 and climb one step to reach index 7, then pay 1 and climb two steps to reach index 9, then pay 1 and climb one step to reach the top. The total cost is 6."
    }
  ],
  "solution": {
    "code": "def minCostClimbingStairs(cost: list[int]) -> int:\n    n = len(cost)\n    \n    # Base cases\n    if n <= 1:\n        return 0\n    \n    # Use dynamic programming with constant space\n    prev1, prev2 = 0, 0\n    \n    for i in range(2, n + 1):\n        current = min(prev1 + cost[i - 1], prev2 + cost[i - 2])\n        prev2, prev1 = prev1, current\n    \n    return prev1",
    "explanation": "This solution uses dynamic programming with constant space:\n1. We can start from either step 0 or step 1 (no cost for starting)\n2. For each step i >= 2, the minimum cost to reach step i is min(cost[i-1] + cost to reach i-1, cost[i-2] + cost to reach i-2)\n3. We use two variables to store the previous two minimum costs\n4. We iterate from step 2 to step n (top of stairs)\n5. The final answer is the minimum cost to reach the top\n\nThe time complexity is O(n) as we iterate through the cost array once. The space complexity is O(1) as we only use two variables."
  }
}
