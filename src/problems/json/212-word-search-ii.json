{
  "id": 212,
  "title": "Word Search II",
  "list": ["neetcode150"],
  "category": "Tries",
  "difficulty": "Hard",
  "description": "Given an m x n board of characters and a list of strings words, return all words on the board.\n\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.",
  "constraints": [
    "m == board.length",
    "n == board[i].length",
    "1 <= m, n <= 12",
    "1 <= words.length <= 3 * 104",
    "1 <= words[i].length <= 10",
    "board[i][j] is a lowercase English letter",
    "words[i] consists of lowercase English letters"
  ],
  "testCases": [
    {
      "input": {
        "board": [
          ["o", "a", "a", "n"],
          ["e", "t", "a", "e"],
          ["i", "h", "k", "r"],
          ["i", "f", "l", "v"]
        ],
        "words": ["oath", "pea", "eat", "rain"]
      },
      "output": ["eat", "oath"],
      "explanation": "We can find 'eat' and 'oath' on the board."
    },
    {
      "input": {
        "board": [
          ["a", "b"],
          ["c", "d"]
        ],
        "words": ["abcb"]
      },
      "output": [],
      "explanation": "No word can be found on the board."
    },
    {
      "input": {
        "board": [["a", "a"]],
        "words": ["aaa"]
      },
      "output": [],
      "explanation": "Cannot reuse the same cell multiple times."
    }
  ],
  "solution": {
    "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n        self.word = \"\"\n\nclass Solution:\n    def findWords(self, board: list[list[str]], words: list[str]) -> list[str]:\n        # Build Trie from words\n        root = TrieNode()\n        for word in words:\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.is_end = True\n            node.word = word\n        \n        # DFS on board\n        result = set()\n        rows, cols = len(board), len(board[0])\n        \n        def dfs(r, c, node):\n            if (r < 0 or r >= rows or c < 0 or c >= cols or \n                board[r][c] == '#' or board[r][c] not in node.children):\n                return\n            \n            char = board[r][c]\n            curr_node = node.children[char]\n            \n            # Check if we found a word\n            if curr_node.is_end:\n                result.add(curr_node.word)\n                curr_node.is_end = False  # Avoid duplicates\n            \n            # Mark as visited\n            board[r][c] = '#'\n            \n            # Explore all directions\n            dfs(r + 1, c, curr_node)\n            dfs(r - 1, c, curr_node)\n            dfs(r, c + 1, curr_node)\n            dfs(r, c - 1, curr_node)\n            \n            # Backtrack\n            board[r][c] = char\n        \n        # Start DFS from each cell\n        for r in range(rows):\n            for c in range(cols):\n                dfs(r, c, root)\n        \n        return list(result)",
    "explanation": "This solution uses Trie + DFS:\n- Build Trie from all words for efficient prefix checking\n- Use DFS to explore the board\n- For each cell, check if it leads to a valid word in the Trie\n- Mark visited cells and backtrack\n- Time complexity: O(m * n * 4^L) where L is the maximum word length\n- Space complexity: O(k * L) where k is the number of words"
  }
}
