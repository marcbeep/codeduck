{
  "id": 383,
  "title": "Ransom Note",
  "list": ["grind75"],
  "category": "Arrays & Hashing",
  "difficulty": "Easy",
  "description": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\n\nEach letter in magazine can only be used once in ransomNote.",
  "constraints": [
    "1 <= ransomNote.length, magazine.length <= 105",
    "ransomNote and magazine consist of lowercase English letters"
  ],
  "testCases": [
    {
      "input": {
        "ransomNote": "a",
        "magazine": "b"
      },
      "output": false,
      "explanation": "The letter 'a' is not in magazine."
    },
    {
      "input": {
        "ransomNote": "aa",
        "magazine": "ab"
      },
      "output": false,
      "explanation": "The letter 'a' appears only once in magazine, but we need two 'a's for ransomNote."
    },
    {
      "input": {
        "ransomNote": "aa",
        "magazine": "aab"
      },
      "output": true,
      "explanation": "We can construct 'aa' using the letters from 'aab'."
    },
    {
      "input": {
        "ransomNote": "abc",
        "magazine": "def"
      },
      "output": false,
      "explanation": "None of the letters in ransomNote are in magazine."
    }
  ],
  "solution": {
    "code": "def can_construct(ransom_note: str, magazine: str) -> bool:\n    # Count characters in magazine\n    char_count = {}\n    for char in magazine:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Check if we can construct ransom note\n    for char in ransom_note:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return True",
    "explanation": "Count characters in magazine using a dictionary. For each character in ransom note, check if it's available and decrement count. Time: O(m + n). Space: O(k) where k is number of unique characters."
  }
}
