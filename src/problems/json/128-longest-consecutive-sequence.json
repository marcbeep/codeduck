{
  "id": 128,
  "title": "Longest Consecutive Sequence",
  "list": ["neetcode150"],
  "category": "Arrays & Hashing",
  "difficulty": "Medium",
  "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n\nYou must write an algorithm that runs in O(n) time.",
  "constraints": ["0 <= nums.length <= 105", "-109 <= nums[i] <= 109"],
  "testCases": [
    {
      "input": {
        "nums": [100, 4, 200, 1, 3, 2]
      },
      "output": 4,
      "explanation": "The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."
    },
    {
      "input": {
        "nums": [0, 3, 7, 2, 5, 8, 4, 6, 0, 1]
      },
      "output": 9,
      "explanation": "The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9."
    },
    {
      "input": {
        "nums": []
      },
      "output": 0,
      "explanation": "Empty array has no consecutive sequence."
    }
  ],
  "solution": {
    "code": "def longest_consecutive(nums: list[int]) -> int:\n    if not nums:\n        return 0\n    \n    # Convert to set for O(1) lookup\n    num_set = set(nums)\n    max_length = 0\n    \n    for num in num_set:\n        # Only start counting from the smallest number in a sequence\n        # (i.e., if num-1 exists, skip this num as it's not the start)\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            # Count consecutive numbers starting from current_num\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "explanation": "Convert array to set for O(1) lookup. For each number, check if it's the start of a sequence (num-1 doesn't exist). If it is, count consecutive numbers forward. Time: O(n). Space: O(n)."
  }
}
