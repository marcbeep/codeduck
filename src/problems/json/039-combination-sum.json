{
  "id": 39,
  "title": "Combination Sum",
  "list": ["grind75", "neetcode150"],
  "category": "Backtracking",
  "difficulty": "Medium",
  "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.",
  "constraints": [
    "1 <= candidates.length <= 30",
    "2 <= candidates[i] <= 40",
    "All elements of candidates are distinct",
    "1 <= target <= 40"
  ],
  "testCases": [
    {
      "input": {
        "candidates": [2, 3, 6, 7],
        "target": 7
      },
      "output": [[2, 2, 3], [7]],
      "explanation": "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations."
    },
    {
      "input": {
        "candidates": [2, 3, 5],
        "target": 8
      },
      "output": [
        [2, 2, 2, 2],
        [2, 3, 3],
        [3, 5]
      ],
      "explanation": "Multiple combinations are possible: [2,2,2,2], [2,3,3], and [3,5]."
    },
    {
      "input": {
        "candidates": [2],
        "target": 1
      },
      "output": [],
      "explanation": "No combination can sum to 1."
    }
  ],
  "solution": {
    "code": "def combination_sum(candidates: list[int], target: int) -> list[list[int]]:\n    def backtrack(start: int, target: int, path: list[int]):\n        if target == 0:\n            result.append(path[:])\n            return\n        \n        if target < 0:\n            return\n        \n        for i in range(start, len(candidates)):\n            path.append(candidates[i])\n            # We can reuse the same element, so we don't increment i\n            backtrack(i, target - candidates[i], path)\n            path.pop()\n    \n    result = []\n    candidates.sort()  # Optional: helps with pruning\n    backtrack(0, target, [])\n    return result",
    "explanation": "This solution uses backtracking with O(n^(target/min)) time complexity:\n1. Use a recursive backtracking approach to explore all possible combinations\n2. At each step, try adding each candidate to the current combination\n3. Can reuse the same candidate multiple times, so don't increment the start index\n4. Backtrack by removing the last added candidate and trying the next one\n5. Add a combination to result when the target becomes 0\n\nThe time complexity is O(n^(target/min)) where n is the number of candidates and min is the minimum candidate value. The space complexity is O(target/min) for the recursion stack."
  }
}
