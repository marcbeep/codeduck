{
  "id": 684,
  "title": "Redundant Connection",
  "list": ["neetcode150"],
  "category": "Graphs",
  "difficulty": "Medium",
  "description": "In this problem, a tree is an undirected graph that is connected and has no cycles.\n\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\n\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.",
  "constraints": [
    "n == edges.length",
    "3 <= n <= 1000",
    "edges[i].length == 2",
    "1 <= ai < bi <= edges.length",
    "ai != bi",
    "There are no repeated edges",
    "The given graph is connected"
  ],
  "testCases": [
    {
      "input": {
        "edges": [
          [1, 2],
          [1, 3],
          [2, 3]
        ]
      },
      "output": [2, 3],
      "explanation": "The edge [2, 3] can be removed to form a tree."
    },
    {
      "input": {
        "edges": [
          [1, 2],
          [2, 3],
          [3, 4],
          [1, 4],
          [1, 5]
        ]
      },
      "output": [1, 4],
      "explanation": "The edge [1, 4] can be removed to form a tree."
    },
    {
      "input": {
        "edges": [
          [1, 2],
          [2, 3],
          [3, 4],
          [1, 5]
        ]
      },
      "output": [],
      "explanation": "No redundant edge found."
    }
  ],
  "solution": {
    "code": "class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n + 1))\n        self.rank = [0] * (n + 1)\n    \n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x, y):\n        px, py = self.find(x), self.find(y)\n        if px == py:\n            return False  # Already connected (cycle)\n        \n        if self.rank[px] < self.rank[py]:\n            self.parent[px] = py\n        elif self.rank[px] > self.rank[py]:\n            self.parent[py] = px\n        else:\n            self.parent[py] = px\n            self.rank[px] += 1\n        return True\n\ndef findRedundantConnection(edges: list[list[int]]) -> list[int]:\n    n = len(edges)\n    uf = UnionFind(n)\n    \n    for edge in edges:\n        if not uf.union(edge[0], edge[1]):\n            return edge\n    \n    return []",
    "explanation": "This solution uses Union-Find (Disjoint Set) with O(n * α(n)) time complexity:\n1. We use Union-Find to track connected components\n2. For each edge, we try to union the two nodes\n3. If union returns False, it means the nodes are already connected (cycle detected)\n4. We return the edge that creates the cycle\n\nThe time complexity is O(n * α(n)) where α is the inverse Ackermann function (practically constant). The space complexity is O(n) for the Union-Find data structure.\n\nThe key insight is that the first edge that connects already connected nodes is the redundant edge that creates a cycle."
  }
}
