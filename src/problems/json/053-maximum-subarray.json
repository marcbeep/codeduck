{
  "id": 53,
  "title": "Maximum Subarray",
  "list": ["grind75"],
  "category": "Kadane Algorithm",
  "difficulty": "Medium",
  "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
  "constraints": ["1 <= nums.length <= 105", "-104 <= nums[i] <= 104"],
  "testCases": [
    {
      "input": {
        "nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4]
      },
      "output": 6,
      "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
    },
    {
      "input": {
        "nums": [1]
      },
      "output": 1,
      "explanation": "Single element array."
    },
    {
      "input": {
        "nums": [5, 4, -1, 7, 8]
      },
      "output": 23,
      "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
    }
  ],
  "solution": {
    "code": "def max_sub_array(nums: list[int]) -> int:\n    # Initialize max_sum to first element and current_sum to 0\n    max_sum = nums[0]\n    current_sum = 0\n    \n    for num in nums:\n        # If current_sum becomes negative, reset it to 0\n        # This is the key insight of Kadane's algorithm\n        current_sum = max(0, current_sum) + num\n        \n        # Update max_sum if current_sum is larger\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "explanation": "This solution implements Kadane's algorithm with O(n) time complexity:\n1. We maintain two variables: current_sum (sum of current subarray) and max_sum (overall maximum)\n2. For each element, we add it to current_sum\n3. If current_sum becomes negative, we reset it to 0 (since a negative sum would only decrease any future subarray)\n4. We update max_sum whenever current_sum exceeds it\n5. Return the final max_sum\n\nThe time complexity is O(n) as we only need one pass through the array. The space complexity is O(1) as we only use a constant amount of extra space.\n\nKey insight: If the current subarray sum becomes negative, it's better to start fresh with the next element rather than carrying forward a negative sum that would only reduce future subarray sums."
  }
}
