{
  "id": 787,
  "title": "Cheapest Flights Within K Stops",
  "list": ["neetcode150"],
  "category": "Advanced Graphs",
  "difficulty": "Medium",
  "description": "There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\n\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.",
  "constraints": [
    "1 <= n <= 100",
    "0 <= flights.length <= (n * (n - 1) / 2)",
    "flights[i].length == 3",
    "0 <= fromi, toi < n",
    "fromi != toi",
    "1 <= pricei <= 104",
    "There will not be any multiple flights between two cities.",
    "0 <= src, dst, k < n",
    "src != dst"
  ],
  "testCases": [
    {
      "input": {
        "n": 4,
        "flights": [
          [0, 1, 100],
          [1, 2, 100],
          [2, 0, 100],
          [1, 3, 600],
          [2, 3, 200]
        ],
        "src": 0,
        "dst": 3,
        "k": 1
      },
      "output": 700,
      "explanation": "The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700."
    },
    {
      "input": {
        "n": 3,
        "flights": [
          [0, 1, 100],
          [1, 2, 100],
          [0, 2, 500]
        ],
        "src": 0,
        "dst": 2,
        "k": 1
      },
      "output": 200,
      "explanation": "The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200."
    },
    {
      "input": {
        "n": 3,
        "flights": [
          [0, 1, 100],
          [1, 2, 100],
          [0, 2, 500]
        ],
        "src": 0,
        "dst": 2,
        "k": 0
      },
      "output": 500,
      "explanation": "The optimal path with no stops from city 0 to 2 is marked in red and has cost 500."
    }
  ],
  "solution": {
    "code": "import heapq\nfrom collections import defaultdict\n\ndef findCheapestPrice(n: int, flights: list[list[int]], src: int, dst: int, k: int) -> int:\n # Build adjacency list\n graph = defaultdict(list)\n for from_city, to_city, price in flights:\n graph[from_city].append((to_city, price))\n \n # Priority queue: (total_cost, current_city, stops_used)\n pq = [(0, src, 0)]\n \n # Track minimum cost for each (city, stops) combination\n visited = {}\n \n while pq:\n total_cost, current_city, stops = heapq.heappop(pq)\n \n # If we reached destination, return cost\n if current_city == dst:\n return total_cost\n \n # If we've used too many stops, skip\n if stops > k:\n continue\n \n # If we've seen this state with fewer stops, skip\n if (current_city, stops) in visited and visited[(current_city, stops)] <= total_cost:\n continue\n \n visited[(current_city, stops)] = total_cost\n \n # Explore all neighbors\n for neighbor, price in graph[current_city]:\n new_cost = total_cost + price\n new_stops = stops + 1\n \n # Only add if we haven't seen this state or if new cost is better\n if (neighbor, new_stops) not in visited or new_cost < visited[(neighbor, new_stops)]:\n heapq.heappush(pq, (new_cost, neighbor, new_stops))\n \n return -1",
    "explanation": "This solution uses a modified Dijkstra's algorithm with stop count tracking:\n1. Build adjacency list from flights\n2. Use priority queue with (cost, city, stops) tuples\n3. Track visited states to avoid processing same (city, stops) with higher cost\n4. Stop when we reach destination or exhaust all valid paths\n5. Return -1 if no valid path found within k stops\n\nTime complexity: O((V + E) log V) where V is number of cities and E is number of flights\nSpace complexity: O(V * K) where K is maximum stops allowed"
  }
}
