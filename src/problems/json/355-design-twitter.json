{
  "id": 355,
  "title": "Design Twitter",
  "list": ["neetcode150"],
  "category": "Heap / Priority Queue",
  "difficulty": "Medium",
  "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n\nImplement the Twitter class:\n- Twitter() Initializes your twitter object.\n- void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n- List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n- void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n- void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.",
  "constraints": [
    "1 <= userId, followerId, followeeId <= 500",
    "0 <= tweetId <= 104",
    "All the tweets have unique IDs",
    "At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow"
  ],
  "testCases": [
    {
      "input": {
        "operations": [
          "Twitter",
          "postTweet",
          "getNewsFeed",
          "follow",
          "postTweet",
          "getNewsFeed",
          "unfollow",
          "getNewsFeed"
        ],
        "values": [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
      },
      "output": [null, null, [5], null, null, [6, 5], null, [5]],
      "explanation": "Twitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."
    }
  ],
  "solution": {
    "code": "import heapq\nfrom collections import defaultdict\n\nclass Twitter:\n    def __init__(self):\n        # User -> set of users they follow\n        self.following = defaultdict(set)\n        # User -> list of their tweets (tweetId, timestamp)\n        self.tweets = defaultdict(list)\n        # Global timestamp counter\n        self.time = 0\n    \n    def postTweet(self, userId: int, tweetId: int) -> None:\n        # Add tweet to user's tweet list with timestamp\n        self.tweets[userId].append((self.time, tweetId))\n        self.time += 1\n    \n    def getNewsFeed(self, userId: int) -> list[int]:\n        # Get all tweets from user and users they follow\n        tweets = []\n        \n        # Add user's own tweets\n        tweets.extend(self.tweets[userId])\n        \n        # Add tweets from users they follow\n        for followeeId in self.following[userId]:\n            tweets.extend(self.tweets[followeeId])\n        \n        # Sort by timestamp (most recent first) and get top 10\n        tweets.sort(reverse=True)\n        return [tweet[1] for tweet in tweets[:10]]\n    \n    def follow(self, followerId: int, followeeId: int) -> None:\n        # Add followee to follower's following set\n        self.following[followerId].add(followeeId)\n    \n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        # Remove followee from follower's following set\n        if followeeId in self.following[followerId]:\n            self.following[followerId].remove(followeeId)",
    "explanation": "Use defaultdict to track following relationships and tweets:\n1. Store tweets with timestamps for ordering\n2. Collect tweets from user and followed users\n3. Sort by timestamp and return top 10\n4. Use sets for O(1) follow/unfollow operations\n\nTime complexity: O(n log n) for getNewsFeed, Space complexity: O(n)"
  }
}
