{
  "id": 91,
  "title": "Decode Ways",
  "list": ["neetcode150"],
  "category": "1-D DP",
  "difficulty": "Medium",
  "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n\n\"AAJF\" with the grouping (1 1 10 6)\n\"KJF\" with the grouping (11 10 6)\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n\nGiven a string s containing only digits, return the number of ways to decode it.",
  "constraints": [
    "1 <= s.length <= 100",
    "s contains only digits and may contain leading zero(s)."
  ],
  "testCases": [
    {
      "input": {
        "s": "12"
      },
      "output": 2,
      "explanation": "\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."
    },
    {
      "input": {
        "s": "226"
      },
      "output": 3,
      "explanation": "\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
    },
    {
      "input": {
        "s": "06"
      },
      "output": 0,
      "explanation": "\"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\")."
    }
  ],
  "solution": {
    "code": "def numDecodings(s: str) -> int:\n    n = len(s)\n    \n    # Base cases\n    if n == 0 or s[0] == '0':\n        return 0\n    if n == 1:\n        return 1\n    \n    # Use dynamic programming with constant space\n    prev2, prev1 = 1, 1\n    \n    for i in range(1, n):\n        current = 0\n        \n        # Check if current digit can be decoded alone\n        if s[i] != '0':\n            current += prev1\n        \n        # Check if current and previous digit can be decoded together\n        two_digit = int(s[i-1:i+1])\n        if 10 <= two_digit <= 26:\n            current += prev2\n        \n        prev2, prev1 = prev1, current\n    \n    return prev1",
    "explanation": "This solution uses dynamic programming with constant space:\n1. For each position i, we have two choices: decode the current digit alone or decode it with the previous digit\n2. If current digit is not '0', we can decode it alone (add prev1)\n3. If current and previous digit form a valid two-digit number (10-26), we can decode them together (add prev2)\n4. We use two variables to store the previous two counts\n5. The final answer is the number of ways to decode the entire string\n\nThe time complexity is O(n) as we iterate through the string once. The space complexity is O(1) as we only use two variables.\n\nKey insight: At each position, we can either take the current digit alone (if not '0') or take it with the previous digit (if they form a valid 10-26)."
  }
}
