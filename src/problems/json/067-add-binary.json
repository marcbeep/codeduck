{
  "id": 67,
  "title": "Add Binary",
  "list": ["grind75"],
  "category": "Bit Manipulation",
  "difficulty": "Easy",
  "description": "Given two binary strings a and b, return their sum as a binary string.",
  "constraints": [
    "1 <= a.length, b.length <= 104",
    "a and b consist only of '0' or '1' characters",
    "Each string does not contain leading zeros except for the zero itself"
  ],
  "testCases": [
    {
      "input": {
        "a": "11",
        "b": "1"
      },
      "output": "100",
      "explanation": "11 + 1 = 100 in binary."
    },
    {
      "input": {
        "a": "1010",
        "b": "1011"
      },
      "output": "10101",
      "explanation": "1010 + 1011 = 10101 in binary."
    },
    {
      "input": {
        "a": "0",
        "b": "0"
      },
      "output": "0",
      "explanation": "0 + 0 = 0 in binary."
    },
    {
      "input": {
        "a": "1111",
        "b": "1111"
      },
      "output": "11110",
      "explanation": "1111 + 1111 = 11110 in binary."
    }
  ],
  "solution": {
    "code": "def add_binary(a: str, b: str) -> str:\n    # Make both strings the same length by padding with zeros\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    \n    result = []\n    carry = 0\n    \n    # Add from right to left\n    for i in range(max_len - 1, -1, -1):\n        # Get the current digits\n        a_digit = int(a[i])\n        b_digit = int(b[i])\n        \n        # Calculate sum and carry\n        current_sum = a_digit + b_digit + carry\n        result.append(str(current_sum % 2))\n        carry = current_sum // 2\n    \n    # If there's a carry at the end, add it\n    if carry:\n        result.append('1')\n    \n    # Reverse and join\n    return ''.join(result[::-1])",
    "explanation": "Pad shorter string with zeros, add digits from right to left, handle carry. Time complexity O(max(len(a), len(b)))."
  }
}
