{
  "id": 1851,
  "title": "Minimum Interval to Include Each Query",
  "list": ["neetcode150"],
  "category": "Intervals",
  "difficulty": "Hard",
  "description": "You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.\n\nYou are also given an integer array queries. The answer to the jth query is the size of the smallest interval such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1.\n\nReturn an array answer of size queries.length such that answer[j] is the answer to the jth query.",
  "constraints": [
    "1 <= intervals.length <= 105",
    "1 <= queries.length <= 105",
    "intervals[i].length == 2",
    "1 <= lefti <= righti <= 107",
    "1 <= queries[j] <= 107"
  ],
  "testCases": [
    {
      "input": {
        "intervals": [
          [1, 4],
          [2, 4],
          [3, 6],
          [4, 4]
        ],
        "queries": [2, 3, 4, 5]
      },
      "output": [3, 1, 1, 4],
      "explanation": "The queries are processed as follows:\n- Query = 2: The interval [2, 4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2, 4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 1.\n- Query = 4: The interval [4, 4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3, 6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4."
    },
    {
      "input": {
        "intervals": [
          [2, 3],
          [2, 5],
          [1, 8],
          [20, 25]
        ],
        "queries": [2, 19, 5, 22]
      },
      "output": [2, -1, 4, 6],
      "explanation": "The queries are processed as follows:\n- Query = 2: The interval [2, 3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2, 5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20, 25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6."
    }
  ],
  "solution": {
    "code": "import heapq\nfrom collections import defaultdict\n\ndef minInterval(intervals: list[list[int]], queries: list[int]) -> list[int]:\n    # Sort intervals by start time\n    intervals.sort()\n    \n    # Sort queries with their original indices\n    sorted_queries = sorted(enumerate(queries), key=lambda x: x[1])\n    \n    # Min heap to track active intervals (size, end_time)\n    heap = []\n    \n    # Dictionary to store results\n    result = [-1] * len(queries)\n    \n    i = 0  # Index for intervals\n    \n    for query_idx, query_val in sorted_queries:\n        # Add all intervals that start before or at current query\n        while i < len(intervals) and intervals[i][0] <= query_val:\n            start, end = intervals[i]\n            size = end - start + 1\n            heapq.heappush(heap, (size, end))\n            i += 1\n        \n        # Remove intervals that end before current query\n        while heap and heap[0][1] < query_val:\n            heapq.heappop(heap)\n        \n        # If heap is not empty, smallest interval is at top\n        if heap:\n            result[query_idx] = heap[0][0]\n    \n    return result",
    "explanation": "This solution uses a min heap with O((n + m) log n) time complexity:\n1. Sort intervals by start time and queries by value\n2. Use a min heap to track active intervals (size, end_time)\n3. For each query, add all intervals that start before or at the query value\n4. Remove intervals that end before the query value\n5. The smallest active interval (if any) is at the top of the heap\n\nThe key insight is processing queries in sorted order allows us to efficiently manage which intervals are active at each query point."
  }
}
