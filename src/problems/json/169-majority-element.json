{
  "id": 169,
  "title": "Majority Element",
  "list": ["grind75"],
  "category": "Arrays & Hashing",
  "difficulty": "Easy",
  "description": "Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.",
  "constraints": [
    "n == nums.length",
    "1 <= n <= 5 * 104",
    "-109 <= nums[i] <= 109"
  ],
  "testCases": [
    {
      "input": {
        "nums": [3, 2, 3]
      },
      "output": 3,
      "explanation": "3 appears 2 times, which is more than ⌊3 / 2⌋ = 1 time."
    },
    {
      "input": {
        "nums": [2, 2, 1, 1, 1, 2, 2]
      },
      "output": 2,
      "explanation": "2 appears 4 times, which is more than ⌊7 / 2⌋ = 3 times."
    },
    {
      "input": {
        "nums": [1]
      },
      "output": 1,
      "explanation": "Single element is always the majority element."
    },
    {
      "input": {
        "nums": [6, 5, 5]
      },
      "output": 5,
      "explanation": "5 appears 2 times, which is more than ⌊3 / 2⌋ = 1 time."
    }
  ],
  "solution": {
    "code": "def majority_element(nums: list[int]) -> int:\n    # Boyer-Moore Voting Algorithm\n    count = 0\n    candidate = None\n    \n    for num in nums:\n        if count == 0:\n            candidate = num\n        \n        if num == candidate:\n            count += 1\n        else:\n            count -= 1\n    \n    return candidate",
    "explanation": "Use counter and candidate approach. If count becomes 0, change candidate. Increment count for same element, decrement for different. Time: O(n). Space: O(1)."
  }
}
