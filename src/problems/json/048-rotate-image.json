{
  "id": 48,
  "title": "Rotate Image",
  "list": ["neetcode150"],
  "category": "Math & Geometry",
  "difficulty": "Medium",
  "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
  "constraints": [
    "n == matrix.length == matrix[i].length",
    "1 <= n <= 20",
    "-1000 <= matrix[i][j] <= 1000"
  ],
  "testCases": [
    {
      "input": {
        "matrix": [
          [1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]
        ]
      },
      "output": [
        [7, 4, 1],
        [8, 5, 2],
        [9, 6, 3]
      ],
      "explanation": "Rotate the matrix by 90 degrees clockwise."
    },
    {
      "input": {
        "matrix": [
          [5, 1, 9, 11],
          [2, 4, 8, 10],
          [13, 3, 6, 7],
          [15, 14, 12, 16]
        ]
      },
      "output": [
        [15, 13, 2, 5],
        [14, 3, 4, 1],
        [12, 6, 8, 9],
        [16, 7, 10, 11]
      ],
      "explanation": "Rotate the 4x4 matrix by 90 degrees clockwise."
    }
  ],
  "solution": {
    "code": "def rotate(matrix: list[list[int]]) -> None:\n    n = len(matrix)\n    \n    # Transpose the matrix\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    \n    # Reverse each row\n    for i in range(n):\n        matrix[i].reverse()",
    "explanation": "This solution uses a two-step approach:\n1. Transpose the matrix (swap rows and columns)\n2. Reverse each row\n\nThis effectively rotates the matrix 90 degrees clockwise.\n\nExample for 3x3 matrix:\nOriginal: [[1,2,3], [4,5,6], [7,8,9]]\nAfter transpose: [[1,4,7], [2,5,8], [3,6,9]]\nAfter reverse: [[7,4,1], [8,5,2], [9,6,3]]\n\nTime complexity: O(nÂ²) - we visit each element once for transpose and once for reverse.\nSpace complexity: O(1) - we modify the matrix in-place."
  }
}
