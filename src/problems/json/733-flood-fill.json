{
  "id": 733,
  "title": "Flood Fill",
  "list": ["grind75"],
  "category": "Graphs",
  "difficulty": "Easy",
  "description": "An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\n\nYou are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].\n\nTo perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.\n\nReturn the modified image after performing the flood fill.",
  "constraints": [
    "m == image.length",
    "n == image[i].length",
    "1 <= m, n <= 50",
    "0 <= image[i][j], color < 216",
    "0 <= sr < m",
    "0 <= sc < n"
  ],
  "testCases": [
    {
      "input": {
        "image": [
          [1, 1, 1],
          [1, 1, 0],
          [1, 0, 1]
        ],
        "sr": 1,
        "sc": 1,
        "color": 2
      },
      "output": [
        [2, 2, 2],
        [2, 2, 0],
        [2, 0, 1]
      ],
      "explanation": "From the center of the image with position (sr, sc) = (1, 1), all pixels connected by a path of the same color as the starting pixel are colored with the new color."
    },
    {
      "input": {
        "image": [
          [0, 0, 0],
          [0, 0, 0]
        ],
        "sr": 0,
        "sc": 0,
        "color": 0
      },
      "output": [
        [0, 0, 0],
        [0, 0, 0]
      ],
      "explanation": "The starting pixel is already colored 0, so no changes are made to the image."
    },
    {
      "input": {
        "image": [
          [0, 0, 0],
          [0, 1, 1]
        ],
        "sr": 1,
        "sc": 1,
        "color": 1
      },
      "output": [
        [0, 0, 0],
        [0, 1, 1]
      ],
      "explanation": "The starting pixel is already colored 1, so no changes are made to the image."
    }
  ],
  "solution": {
    "code": "def flood_fill(image: list[list[int]], sr: int, sc: int, color: int) -> list[list[int]]:\n    if image[sr][sc] == color:\n        return image\n    \n    original_color = image[sr][sc]\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    def dfs(r: int, c: int):\n        if (0 <= r < len(image) and \n            0 <= c < len(image[0]) and \n            image[r][c] == original_color):\n            \n            image[r][c] = color\n            \n            for dr, dc in directions:\n                dfs(r + dr, c + dc)\n    \n    dfs(sr, sc)\n    return image",
    "explanation": "This solution uses DFS with O(m*n) time complexity:\n1. We use recursion to explore all connected pixels of the same color\n2. We check if the current pixel is valid and has the original color\n3. We fill the current pixel and recursively explore all four directions\n4. We continue until no more pixels can be filled\n\nThe time complexity is O(m*n) as we visit each pixel at most once. The space complexity is O(m*n) in the worst case due to the recursion stack.\n\nThe key insight is that we need to explore all connected pixels of the same color starting from the given position."
  }
}
