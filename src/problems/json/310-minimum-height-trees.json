{
  "id": 310,
  "title": "Minimum Height Trees",
  "list": ["grind75"],
  "category": "Graphs",
  "difficulty": "Medium",
  "description": "A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n\nGiven a tree of n nodes labeled from 0 to n - 1, and an array edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (min(h)) are called minimum height trees (MHTs).\n\nReturn a list of all MHTs' root labels. You can return the answer in any order.\n\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.",
  "constraints": [
    "1 <= n <= 2 * 104",
    "edges.length == n - 1",
    "0 <= ai, bi < n",
    "ai != bi",
    "All the pairs (ai, bi) are distinct",
    "The given input is guaranteed to be a tree and there will be no repeated edges"
  ],
  "testCases": [
    {
      "input": {
        "n": 4,
        "edges": [
          [1, 0],
          [1, 2],
          [1, 3]
        ]
      },
      "output": [1],
      "explanation": "As shown, the height of the tree is 1 when the root is the vertex with label 1 which is the only MHT."
    },
    {
      "input": {
        "n": 6,
        "edges": [
          [3, 0],
          [3, 1],
          [3, 2],
          [3, 4],
          [5, 4]
        ]
      },
      "output": [3, 4],
      "explanation": "The MHTs with roots 3 and 4 have height 2."
    },
    {
      "input": {
        "n": 1,
        "edges": []
      },
      "output": [0],
      "explanation": "Single node tree has height 0."
    }
  ],
  "solution": {
    "code": "from collections import defaultdict, deque\n\ndef findMinHeightTrees(n: int, edges: list[list[int]]) -> list[int]:\n    if n == 1:\n        return [0]\n    \n    # Build adjacency list\n    graph = defaultdict(set)\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Find all leaves (nodes with degree 1)\n    leaves = deque()\n    for node in range(n):\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    \n    # Remove leaves layer by layer until we have 1 or 2 nodes left\n    remaining_nodes = n\n    while remaining_nodes > 2:\n        leaves_size = len(leaves)\n        remaining_nodes -= leaves_size\n        \n        for _ in range(leaves_size):\n            leaf = leaves.popleft()\n            # Get the only neighbor of this leaf\n            neighbor = next(iter(graph[leaf]))\n            # Remove the leaf from neighbor's adjacency list\n            graph[neighbor].remove(leaf)\n            # If neighbor becomes a leaf, add it to queue\n            if len(graph[neighbor]) == 1:\n                leaves.append(neighbor)\n    \n    return list(leaves)",
    "explanation": "This solution uses a topological sort approach to find the center(s) of the tree:\n1. We build an adjacency list representation of the tree\n2. We find all leaves (nodes with degree 1) and add them to a queue\n3. We remove leaves layer by layer until we have 1 or 2 nodes remaining\n4. The remaining nodes are the centers of the tree and will be the roots of MHTs\n\nKey insight: The MHT roots are the centers of the tree. In a tree, there can be at most 2 centers:\n- If the tree has an odd number of nodes, there is 1 center\n- If the tree has an even number of nodes, there are 2 centers\n\nExample: n = 4, edges = [[1, 0], [1, 2], [1, 3]]\n- Initial leaves: [0, 2, 3] (all have degree 1)\n- Remove leaves: remaining_nodes = 1\n- Remaining node: [1] â†’ this is the center and MHT root\n\nThe time complexity is O(n) as we process each node and edge exactly once. The space complexity is O(n) for the adjacency list and queue."
  }
}
