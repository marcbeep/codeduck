{
  "id": 518,
  "title": "Coin Change II",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Medium",
  "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n\nYou may assume that you have an infinite number of each kind of coin.\n\nThe answer is guaranteed to fit into a signed 32-bit integer.",
  "constraints": [
    "1 <= coins.length <= 300",
    "1 <= coins[i] <= 5000",
    "All the values of coins are unique",
    "0 <= amount <= 5000"
  ],
  "testCases": [
    {
      "input": {
        "amount": 5,
        "coins": [1, 2, 5]
      },
      "output": 4,
      "explanation": "There are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1"
    },
    {
      "input": {
        "amount": 3,
        "coins": [2]
      },
      "output": 0,
      "explanation": "The amount of 3 cannot be made up just with coins of 2."
    },
    {
      "input": {
        "amount": 10,
        "coins": [10]
      },
      "output": 1,
      "explanation": "There is only one way to make up the amount with coin of 10."
    }
  ],
  "solution": {
    "code": "def change(amount: int, coins: list[int]) -> int:\n    # Create DP array where dp[i] = number of ways to make amount i\n    dp = [0] * (amount + 1)\n    dp[0] = 1  # Base case: one way to make amount 0\n    \n    # For each coin, update all amounts that can be made\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    \n    return dp[amount]",
    "explanation": "This solution uses 1-D DP optimized from 2-D approach:\n1. dp[i] represents number of ways to make amount i\n2. Base case: dp[0] = 1 (one way to make amount 0)\n3. For each coin, iterate through all amounts >= coin value\n4. dp[i] += dp[i - coin] (add ways from using current coin)\n\nKey insight: Process coins one by one to avoid counting permutations.\n\nTime complexity: O(amount * len(coins)), Space complexity: O(amount)"
  }
}
