{
  "id": 19,
  "title": "Remove Nth Node From End of List",
  "list": ["neetcode150"],
  "category": "Linked List",
  "difficulty": "Medium",
  "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
  "constraints": [
    "The number of nodes in the list is sz",
    "1 <= sz <= 30",
    "0 <= Node.val <= 100",
    "1 <= n <= sz"
  ],
  "testCases": [
    {
      "input": {
        "head": [1, 2, 3, 4, 5],
        "n": 2
      },
      "output": [1, 2, 3, 5],
      "explanation": "We remove the 2nd node from the end (node with value 4)."
    },
    {
      "input": {
        "head": [1],
        "n": 1
      },
      "output": [],
      "explanation": "We remove the only node in the list."
    },
    {
      "input": {
        "head": [1, 2],
        "n": 1
      },
      "output": [1],
      "explanation": "We remove the last node (node with value 2)."
    },
    {
      "input": {
        "head": [1, 2],
        "n": 2
      },
      "output": [2],
      "explanation": "We remove the first node (node with value 1)."
    }
  ],
  "solution": {
    "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\ndef removeNthFromEnd(head, n):\n    # Use two pointers: fast and slow\n    # Fast pointer moves n steps ahead first\n    dummy = ListNode(0)\n    dummy.next = head\n    \n    fast = slow = dummy\n    \n    # Move fast pointer n steps ahead\n    for _ in range(n + 1):\n        fast = fast.next\n    \n    # Move both pointers until fast reaches the end\n    while fast:\n        fast = fast.next\n        slow = slow.next\n    \n    # Remove the nth node from end\n    slow.next = slow.next.next\n    \n    return dummy.next",
    "explanation": "Use a dummy node to handle edge cases. Move fast pointer n+1 steps ahead of slow pointer. When fast reaches the end, slow is at the node before the one to remove.\n\nTime complexity: O(n) with single pass\nSpace complexity: O(1)\n\nKey insight: The two-pointer approach is most efficient as it requires only one pass through the list."
  }
}
