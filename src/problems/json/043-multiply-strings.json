{
  "id": 43,
  "title": "Multiply Strings",
  "list": ["neetcode150"],
  "category": "Math & Geometry",
  "difficulty": "Medium",
  "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.",
  "constraints": [
    "1 <= num1.length, num2.length <= 200",
    "num1 and num2 consist of digits only.",
    "Both num1 and num2 do not contain any leading zero, except the number 0 itself."
  ],
  "testCases": [
    {
      "input": {
        "num1": "2",
        "num2": "3"
      },
      "output": "6",
      "explanation": "2 * 3 = 6"
    },
    {
      "input": {
        "num1": "123",
        "num2": "456"
      },
      "output": "56088",
      "explanation": "123 * 456 = 56088"
    },
    {
      "input": {
        "num1": "0",
        "num2": "0"
      },
      "output": "0",
      "explanation": "0 * 0 = 0"
    }
  ],
  "solution": {
    "code": "def multiply(num1: str, num2: str) -> str:\n    if num1 == \"0\" or num2 == \"0\":\n        return \"0\"\n    \n    m, n = len(num1), len(num2)\n    result = [0] * (m + n)\n    \n    # Multiply each digit of num1 with each digit of num2\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            # Multiply digits and add to the appropriate position\n            product = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))\n            pos1, pos2 = i + j, i + j + 1\n            \n            # Add to current position\n            result[pos2] += product\n            \n            # Handle carry\n            result[pos1] += result[pos2] // 10\n            result[pos2] %= 10\n    \n    # Convert result array to string\n    result_str = \"\".join(map(str, result))\n    \n    # Remove leading zeros\n    return result_str.lstrip('0') or \"0\"",
    "explanation": "Implement grade-school multiplication. Create result array of size m+n, multiply each digit pair, handle carries, remove leading zeros. Time O(m*n), space O(m+n)."
  }
}
