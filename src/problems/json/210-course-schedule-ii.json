{
  "id": 210,
  "title": "Course Schedule II",
  "list": ["neetcode150"],
  "category": "Graphs",
  "difficulty": "Medium",
  "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.",
  "constraints": [
    "1 <= numCourses <= 2000",
    "0 <= prerequisites.length <= 5000",
    "prerequisites[i].length == 2",
    "0 <= ai, bi < numCourses",
    "All the pairs prerequisites[i] are unique"
  ],
  "testCases": [
    {
      "input": {
        "numCourses": 4,
        "prerequisites": [
          [1, 0],
          [2, 0],
          [3, 1],
          [3, 2]
        ]
      },
      "output": [0, 1, 2, 3],
      "explanation": "One valid course order is [0,1,2,3]. Another valid course order is [0,2,1,3]."
    },
    {
      "input": {
        "numCourses": 2,
        "prerequisites": [[1, 0]]
      },
      "output": [0, 1],
      "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]."
    },
    {
      "input": {
        "numCourses": 2,
        "prerequisites": [
          [1, 0],
          [0, 1]
        ]
      },
      "output": [],
      "explanation": "It is impossible to finish all courses."
    }
  ],
  "solution": {
    "code": "from collections import defaultdict, deque\n\ndef findOrder(numCourses: int, prerequisites: list[list[int]]) -> list[int]:\n    # Build adjacency list and in-degree count\n    graph = defaultdict(list)\n    in_degree = [0] * numCourses\n    \n    for course, prereq in prerequisites:\n        graph[prereq].append(course)\n        in_degree[course] += 1\n    \n    # Kahn's algorithm for topological sort\n    queue = deque()\n    \n    # Add all courses with no prerequisites\n    for course in range(numCourses):\n        if in_degree[course] == 0:\n            queue.append(course)\n    \n    result = []\n    \n    while queue:\n        course = queue.popleft()\n        result.append(course)\n        \n        # Reduce in-degree for all dependent courses\n        for dependent in graph[course]:\n            in_degree[dependent] -= 1\n            if in_degree[dependent] == 0:\n                queue.append(dependent)\n    \n    # Check if we can complete all courses\n    return result if len(result) == numCourses else []",
    "explanation": "This solution uses Kahn's algorithm (topological sort) with O(V + E) time complexity:\n1. We build an adjacency list representation of the graph and track in-degrees\n2. We use a queue to process courses with no remaining prerequisites\n3. For each completed course, we reduce the in-degree of its dependent courses\n4. If a course's in-degree becomes 0, we add it to the queue\n5. We return the result if we complete exactly numCourses courses, otherwise empty array\n\nThe time complexity is O(V + E) where V is the number of courses and E is the number of prerequisites. The space complexity is O(V + E) for the graph representation.\n\nThe key insight is that this is essentially finding a topological order of the course dependency graph."
  }
}
