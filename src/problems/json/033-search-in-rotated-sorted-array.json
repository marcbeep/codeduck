{
  "id": 33,
  "title": "Search in Rotated Sorted Array",
  "list": [
    "grind75"
  ],
  "category": "Binary Search",
  "difficulty": "Medium",
  "description": "There is an integer array nums sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n\nYou must write an algorithm with O(log n) runtime complexity.",
  "constraints": [
    "1 <= nums.length <= 5000",
    "-104 <= nums[i] <= 104",
    "All values of nums are unique",
    "nums is an ascending array that is possibly rotated",
    "-104 <= target <= 104"
  ],
  "testCases": [
    {
      "input": {
        "nums": [
          4,
          5,
          6,
          7,
          0,
          1,
          2
        ],
        "target": 0
      },
      "output": 4,
      "explanation": "Target 0 is found at index 4."
    },
    {
      "input": {
        "nums": [
          4,
          5,
          6,
          7,
          0,
          1,
          2
        ],
        "target": 3
      },
      "output": -1,
      "explanation": "Target 3 is not in nums so return -1."
    },
    {
      "input": {
        "nums": [
          1
        ],
        "target": 0
      },
      "output": -1,
      "explanation": "Target 0 is not in nums so return -1."
    }
  ],
  "solution": {
    "code": "def search(nums: list[int], target: int) -> int:\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == target:\n            return mid\n        \n        # Check if left half is sorted\n        if nums[left] <= nums[mid]:\n            # Target is in left half\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            # Right half is sorted\n            # Target is in right half\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    return -1",
    "explanation": "This solution uses binary search with O(log n) time complexity:\n1. We use binary search to find the target in the rotated array\n2. At each step, we check if the left half or right half is sorted\n3. If left half is sorted and target is within its range, we search there\n4. If right half is sorted and target is within its range, we search there\n5. Otherwise, we search in the other half\n6. We continue until we find the target or exhaust the search space\n\nThe time complexity is O(log n) as we use binary search. The space complexity is O(1) as we only use a constant amount of extra space.\n\nKey insights:\n- In a rotated sorted array, one half is always sorted\n- We can determine which half is sorted by comparing nums[left] with nums[mid]\n- If the target is within the sorted half's range, we search there\n- Otherwise, we search in the unsorted half\n- This maintains the O(log n) complexity of binary search\n\nExample: For [4,5,6,7,0,1,2] and target 0:\n- Left half [4,5,6] is sorted, but 0 is not in range [4,6]\n- Right half [7,0,1,2] is not sorted, so we search there\n- Continue binary search in the right half"
  }
}
