{
  "id": 167,
  "title": "Two Sum II - Input Array Is Sorted",
  "list": ["neetcode150"],
  "category": "Two Pointers",
  "difficulty": "Medium",
  "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\n\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\n\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\n\nYour solution must use only constant extra space.",
  "constraints": [
    "2 <= numbers.length <= 3 * 104",
    "-1000 <= numbers[i] <= 1000",
    "numbers is sorted in non-decreasing order",
    "-1000 <= target <= 1000",
    "The tests are generated such that there is exactly one solution"
  ],
  "testCases": [
    {
      "input": {
        "numbers": [2, 7, 11, 15],
        "target": 9
      },
      "output": [1, 2],
      "explanation": "The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]."
    },
    {
      "input": {
        "numbers": [2, 3, 4],
        "target": 6
      },
      "output": [1, 3],
      "explanation": "The sum of 2 and 4 is 6. Therefore, index1 = 1, index2 = 3. We return [1, 3]."
    },
    {
      "input": {
        "numbers": [-1, 0],
        "target": -1
      },
      "output": [1, 2],
      "explanation": "The sum of -1 and 0 is -1. Therefore, index1 = 1, index2 = 2. We return [1, 2]."
    }
  ],
  "solution": {
    "code": "def two_sum(numbers: list[int], target: int) -> list[int]:\n    left, right = 0, len(numbers) - 1\n    \n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        \n        if current_sum == target:\n            # Return 1-indexed positions\n            return [left + 1, right + 1]\n        elif current_sum < target:\n            # Need a larger sum, move left pointer right\n            left += 1\n        else:\n            # Need a smaller sum, move right pointer left\n            right -= 1\n    \n    # This should never be reached given the problem constraints\n    return []",
    "explanation": "This solution uses the two-pointer approach:\n1. Start with two pointers at the beginning and end of the sorted array\n2. Calculate the sum of elements at both pointers\n3. If sum equals target, return 1-indexed positions\n4. If sum < target, move left pointer right (need larger sum)\n5. If sum > target, move right pointer left (need smaller sum)\n\nKey insight: Since array is sorted, moving left pointer increases sum, moving right pointer decreases sum.\n\nTime complexity: O(n), Space complexity: O(1)"
  }
}
