{
  "id": 5,
  "title": "Longest Palindromic Substring",
  "list": ["grind75", "neetcode150"],
  "category": "1-D DP",
  "difficulty": "Medium",
  "description": "Given a string s, return the longest palindromic substring in s.",
  "constraints": [
    "1 <= s.length <= 1000",
    "s consist of only digits and English letters"
  ],
  "testCases": [
    {
      "input": {
        "s": "babad"
      },
      "output": "bab",
      "explanation": "\"aba\" is also a valid answer."
    },
    {
      "input": {
        "s": "cbbd"
      },
      "output": "bb",
      "explanation": "The longest palindromic substring is \"bb\"."
    },
    {
      "input": {
        "s": "a"
      },
      "output": "a",
      "explanation": "Single character is always a palindrome."
    }
  ],
  "solution": {
    "code": "def longestPalindrome(s: str) -> str:\n    def expandAroundCenter(left: int, right: int) -> str:\n        # Expand around center while characters match\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        # Return the palindrome (left and right are now outside the palindrome)\n        return s[left + 1:right]\n    \n    if len(s) < 2:\n        return s\n    \n    longest = \"\"\n    \n    for i in range(len(s)):\n        # Check odd-length palindromes (single character center)\n        odd = expandAroundCenter(i, i)\n        if len(odd) > len(longest):\n            longest = odd\n        \n        # Check even-length palindromes (two character center)\n        if i + 1 < len(s):\n            even = expandAroundCenter(i, i + 1)\n            if len(even) > len(longest):\n                longest = even\n    \n    return longest",
    "explanation": "This solution uses the \"expand around center\" approach:\n- For each position, treat it as a potential center of a palindrome\n- Expand outward while characters match\n- Check both odd-length (single character center) and even-length (two character center) palindromes\n- Time complexity: O(nÂ²), Space complexity: O(1)"
  }
}
