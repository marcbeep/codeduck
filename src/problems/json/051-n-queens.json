{
  "id": 51,
  "title": "N Queens",
  "list": ["neetcode150"],
  "category": "Backtracking",
  "difficulty": "Hard",
  "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.",
  "constraints": ["1 <= n <= 9"],
  "testCases": [
    {
      "input": {
        "n": 4
      },
      "output": [
        [".Q..", "...Q", "Q...", "..Q."],
        ["..Q.", "Q...", "...Q", ".Q.."]
      ],
      "explanation": "Two distinct solutions for 4-queens puzzle."
    },
    {
      "input": {
        "n": 1
      },
      "output": [["Q"]],
      "explanation": "Single queen on 1x1 board."
    },
    {
      "input": {
        "n": 2
      },
      "output": [],
      "explanation": "No solution exists for 2-queens on 2x2 board."
    }
  ],
  "solution": {
    "code": "def solveNQueens(n: int) -> list[list[str]]:\n    def is_safe(row: int, col: int) -> bool:\n        # Check column\n        for i in range(row):\n            if board[i][col] == 'Q':\n                return False\n        \n        # Check upper left diagonal\n        for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):\n            if board[i][j] == 'Q':\n                return False\n        \n        # Check upper right diagonal\n        for i, j in zip(range(row-1, -1, -1), range(col+1, n)):\n            if board[i][j] == 'Q':\n                return False\n        \n        return True\n    \n    def backtrack(row: int):\n        # If we've placed all queens, add current board to result\n        if row == n:\n            result.append([''.join(row) for row in board])\n            return\n        \n        # Try placing queen in each column of current row\n        for col in range(n):\n            if is_safe(row, col):\n                board[row][col] = 'Q'\n                backtrack(row + 1)\n                board[row][col] = '.'  # Backtrack\n    \n    result = []\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    backtrack(0)\n    return result",
    "explanation": "This solution uses backtracking to solve the N-Queens puzzle:\n1. Use a recursive function that places queens row by row\n2. For each row, try placing a queen in each column\n3. Before placing a queen, check if it's safe (no conflicts with existing queens)\n4. Check for conflicts in the same column and both diagonals\n5. If safe, place the queen and recurse to the next row\n6. Backtrack by removing the queen and trying the next column\n7. When placing all n queens, add the current board to result\n\nThe time complexity is O(n!) as we try n positions for the first queen, n-1 for the second, etc. The space complexity is O(n^2) for the board."
  }
}
