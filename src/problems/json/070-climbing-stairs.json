{
  "id": 70,
  "title": "Climbing Stairs",
  "list": ["grind75", "neetcode150"],
  "category": "1-D DP",
  "difficulty": "Easy",
  "description": "You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
  "constraints": ["1 <= n <= 45"],
  "testCases": [
    {
      "input": {
        "n": 2
      },
      "output": 2,
      "explanation": "There are two ways to climb to the top:\n1. 1 step + 1 step\n2. 2 steps"
    },
    {
      "input": {
        "n": 3
      },
      "output": 3,
      "explanation": "There are three ways to climb to the top:\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
    },
    {
      "input": {
        "n": 1
      },
      "output": 1,
      "explanation": "There is only one way to climb 1 step."
    },
    {
      "input": {
        "n": 4
      },
      "output": 5,
      "explanation": "There are five ways to climb to the top:\n1. 1+1+1+1\n2. 1+1+2\n3. 1+2+1\n4. 2+1+1\n5. 2+2"
    }
  ],
  "solution": {
    "code": "def climb_stairs(n: int) -> int:\n    # Base cases\n    if n <= 2:\n        return n\n    \n    # Use dynamic programming with constant space\n    prev1, prev2 = 1, 2\n    \n    for i in range(3, n + 1):\n        current = prev1 + prev2\n        prev1, prev2 = prev2, current\n    \n    return prev2",
    "explanation": "This solution uses dynamic programming with constant space:\n- Use only two variables to store previous results\n- Iterate from 3 to n, updating the two variables\n- Time complexity: O(n), Space complexity: O(1)"
  }
}
