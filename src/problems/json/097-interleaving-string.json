{
  "id": 97,
  "title": "Interleaving String",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Medium",
  "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n\ns = s1 + s2 + ... + sn\nt = t1 + t2 + ... + tm\n|n - m| <= 1\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\nNote: a + b is the concatenation of strings a and b.",
  "constraints": [
    "0 <= s1.length, s2.length <= 100",
    "0 <= s3.length <= 200",
    "s1, s2, and s3 consist of lowercase English letters."
  ],
  "testCases": [
    {
      "input": {
        "s1": "aabcc",
        "s2": "dbbca",
        "s3": "aadbbcbcac"
      },
      "output": true,
      "explanation": "One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the splits: \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\"."
    },
    {
      "input": {
        "s1": "aabcc",
        "s2": "dbbca",
        "s3": "aadbbbaccc"
      },
      "output": false,
      "explanation": "s3 cannot be formed by interleaving s1 and s2."
    },
    {
      "input": {
        "s1": "",
        "s2": "",
        "s3": ""
      },
      "output": true,
      "explanation": "Empty strings can be interleaved to form empty string."
    }
  ],
  "solution": {
    "code": "def isInterleave(s1: str, s2: str, s3: str) -> bool:\n    m, n = len(s1), len(s2)\n    if m + n != len(s3):\n        return False\n    \n    # dp[i][j] = can form s3[0:i+j] using s1[0:i] and s2[0:j]\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    \n    # Fill first row: using only s2\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]\n    \n    # Fill first column: using only s1\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\n    \n    # Fill rest of DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # Can use s1[i-1] or s2[j-1] to match s3[i+j-1]\n            dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or \\\n                       (dp[i][j-1] and s2[j-1] == s3[i+j-1])\n    \n    return dp[m][n]",
    "explanation": "This solution uses 2-D DP:\n1. dp[i][j] = can form s3[0:i+j] using s1[0:i] and s2[0:j]\n2. Base case: dp[0][0] = True (empty strings)\n3. For each position (i,j):\n   - Can use s1[i-1] if dp[i-1][j] and s1[i-1] == s3[i+j-1]\n   - Can use s2[j-1] if dp[i][j-1] and s2[j-1] == s3[i+j-1]\n4. Answer is dp[m][n]\n\nTime complexity: O(m*n), Space complexity: O(m*n)"
  }
}
