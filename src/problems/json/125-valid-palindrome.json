{
  "id": 125,
  "title": "Valid Palindrome",
  "list": ["grind75", "neetcode150"],
  "category": "Two Pointers",
  "difficulty": "Easy",
  "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string s, return true if it is a palindrome, or false otherwise.",
  "constraints": [
    "1 <= s.length <= 2 * 105",
    "s consists only of printable ASCII characters"
  ],
  "testCases": [
    {
      "input": {
        "s": "A man, a plan, a canal: Panama"
      },
      "output": true,
      "explanation": "After removing non-alphanumeric characters: 'amanaplanacanalpanama' which reads the same forward and backward."
    },
    {
      "input": {
        "s": "race a car"
      },
      "output": false,
      "explanation": "After removing non-alphanumeric characters: 'raceacar' which is not a palindrome."
    },
    {
      "input": {
        "s": " "
      },
      "output": true,
      "explanation": "An empty string is considered a palindrome."
    },
    {
      "input": {
        "s": "0P"
      },
      "output": false,
      "explanation": "After converting to lowercase: '0p' which is not a palindrome."
    }
  ],
  "solution": {
    "code": "def is_palindrome(s: str) -> bool:\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        # Skip non-alphanumeric characters from left\n        while left < right and not s[left].isalnum():\n            left += 1\n        # Skip non-alphanumeric characters from right\n        while left < right and not s[right].isalnum():\n            right -= 1\n        \n        # Compare characters (case-insensitive)\n        if s[left].lower() != s[right].lower():\n            return False\n        \n        left += 1\n        right -= 1\n    \n    return True",
    "explanation": "This solution uses the two-pointer approach:\n1. Use two pointers from both ends of the string\n2. Skip non-alphanumeric characters from both directions\n3. Compare characters case-insensitively\n4. Return false if any mismatch, true if pointers meet\n\nTime complexity: O(n), Space complexity: O(1)"
  }
}
