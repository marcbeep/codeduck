{
  "id": 1235,
  "title": "Maximum Profit in Job Scheduling",
  "list": [
    "grind75"
  ],
  "category": "Multidimensional DP",
  "difficulty": "Hard",
  "description": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\n\nYou're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\n\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.",
  "constraints": [
    "1 <= startTime.length == endTime.length == profit.length <= 5 * 104",
    "1 <= startTime[i] < endTime[i] <= 109",
    "1 <= profit[i] <= 104"
  ],
  "testCases": [
    {
      "input": {
        "startTime": [
          1,
          2,
          3,
          3
        ],
        "endTime": [
          3,
          4,
          5,
          6
        ],
        "profit": [
          50,
          10,
          40,
          70
        ]
      },
      "output": 120,
      "explanation": "The subset chosen is the first and fourth job.\nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70."
    },
    {
      "input": {
        "startTime": [
          1,
          2,
          3,
          4,
          6
        ],
        "endTime": [
          3,
          5,
          10,
          6,
          9
        ],
        "profit": [
          20,
          20,
          100,
          70,
          60
        ]
      },
      "output": 150,
      "explanation": "The subset chosen is the first, fourth and fifth job.\nProfit obtained 150 = 20 + 70 + 60."
    },
    {
      "input": {
        "startTime": [
          1,
          1,
          1
        ],
        "endTime": [
          2,
          3,
          4
        ],
        "profit": [
          5,
          6,
          4
        ]
      },
      "output": 6,
      "explanation": "The subset chosen is the second job."
    }
  ],
  "solution": {
    "code": "import bisect\n\ndef jobScheduling(startTime: list[int], endTime: list[int], profit: list[int]) -> int:\n    # Combine all job information and sort by end time\n    jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])\n    \n    # dp[i] represents the maximum profit for jobs[0...i]\n    dp = [0] * len(jobs)\n    dp[0] = jobs[0][2]  # First job's profit\n    \n    for i in range(1, len(jobs)):\n        # Include current job\n        current_profit = jobs[i][2]\n        \n        # Find the latest non-overlapping job using binary search\n        # We need to find the largest index j where jobs[j][1] <= jobs[i][0]\n        j = bisect.bisect_right([job[1] for job in jobs[:i]], jobs[i][0]) - 1\n        \n        if j >= 0:\n            current_profit += dp[j]\n        \n        # Don't include current job\n        dp[i] = max(dp[i-1], current_profit)\n    \n    return dp[-1]",
    "explanation": "This solution uses dynamic programming with binary search:\n1. We combine all job information and sort by end time\n2. We use a DP array where dp[i] represents the maximum profit for jobs[0...i]\n3. For each job, we have two choices:\n   - Include the current job: add its profit plus profit from latest non-overlapping job\n   - Don't include the current job: take profit from previous job\n4. We use binary search to find the latest non-overlapping job efficiently\n5. We return the maximum profit from the last job\n\nKey insight: By sorting by end time, we can use binary search to find non-overlapping jobs efficiently.\n\nExample: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\n- Sorted jobs: [(1,3,50), (2,4,10), (3,5,40), (3,6,70)]\n- dp[0] = 50 (first job)\n- dp[1] = max(dp[0], 10 + dp[0]) = 60 (include job 1 + job 0)\n- dp[2] = max(dp[1], 40 + dp[0]) = 90 (include job 2 + job 0)\n- dp[3] = max(dp[2], 70 + dp[0]) = 120 (include job 3 + job 0)\n- Result: 120\n\nThe time complexity is O(n log n) for sorting and binary search. The space complexity is O(n) for the DP array."
  }
}
