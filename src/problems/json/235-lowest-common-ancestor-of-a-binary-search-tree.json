{
  "id": 235,
  "title": "Lowest Common Ancestor of a Binary Search Tree",
  "list": ["grind75", "neetcode150", "marc30"],
  "category": "Trees",
  "difficulty": "Medium",
  "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\"",
  "constraints": [
    "The number of nodes in the tree is in the range [2, 105]",
    "-109 <= Node.val <= 109",
    "All Node.val are unique",
    "p != q",
    "p and q will exist in the BST"
  ],
  "testCases": [
    {
      "input": {
        "root": [6, 2, 8, 0, 4, 7, 9, null, null, 3, 5],
        "p": 2,
        "q": 8
      },
      "output": 6,
      "explanation": "The LCA of nodes 2 and 8 is 6."
    },
    {
      "input": {
        "root": [6, 2, 8, 0, 4, 7, 9, null, null, 3, 5],
        "p": 2,
        "q": 4
      },
      "output": 2,
      "explanation": "The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself."
    },
    {
      "input": {
        "root": [2, 1],
        "p": 2,
        "q": 1
      },
      "output": 2,
      "explanation": "The LCA of nodes 2 and 1 is 2."
    }
  ],
  "solution": {
    "code": "def lowestCommonAncestor(root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n    # Use BST property: left subtree < root < right subtree\n    current = root\n    \n    while current:\n        # If both p and q are greater than current, go right\n        if p.val > current.val and q.val > current.val:\n            current = current.right\n        # If both p and q are less than current, go left\n        elif p.val < current.val and q.val < current.val:\n            current = current.left\n        # Otherwise, current is the LCA\n        else:\n            return current\n    \n    return None",
    "explanation": "This solution uses the BST property to find LCA efficiently:\n1. Start from the root and traverse down the tree\n2. If both p and q are greater than current node, go to right subtree\n3. If both p and q are less than current node, go to left subtree\n4. Otherwise, current node is the LCA (one is in left, one in right, or one is current)\n\nThe time complexity is O(h) where h is the height of the tree. The space complexity is O(1) as we only use a constant amount of extra space."
  }
}
