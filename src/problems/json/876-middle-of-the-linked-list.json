{
  "id": 876,
  "title": "Middle of the Linked List",
  "list": ["grind75"],
  "category": "Linked List",
  "difficulty": "Easy",
  "description": "Given the head of a singly linked list, return the middle node of the linked list.\n\nIf there are two middle nodes, return the second middle node.",
  "constraints": [
    "The number of nodes in the list is in the range [1, 100]",
    "1 <= Node.val <= 100"
  ],
  "testCases": [
    {
      "input": {
        "head": [1, 2, 3, 4, 5]
      },
      "output": [3, 4, 5],
      "explanation": "The middle node of the list is node 3."
    },
    {
      "input": {
        "head": [1, 2, 3, 4, 5, 6]
      },
      "output": [4, 5, 6],
      "explanation": "Since the list has two middle nodes with values 3 and 4, we return the second one."
    },
    {
      "input": {
        "head": [1]
      },
      "output": [1],
      "explanation": "Single node is the middle node."
    },
    {
      "input": {
        "head": [1, 2]
      },
      "output": [2],
      "explanation": "Since there are two middle nodes, return the second one."
    }
  ],
  "solution": {
    "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\ndef middle_node(head):\n    # Two pointer approach (Fast and Slow)\n    slow = head\n    fast = head\n    \n    # Move fast pointer twice as fast as slow pointer\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    \n    return slow",
    "explanation": "Use slow and fast pointers. Fast pointer moves twice as fast as slow pointer. When fast reaches end, slow is at middle.\n\nTime complexity: O(n/2) = O(n)\nSpace complexity: O(1)\n\nThe two pointer approach is the most efficient and elegant solution, as it requires only one pass through the list and uses constant space."
  }
}
