{
  "id": 138,
  "title": "Copy List With Random Pointer",
  "list": ["neetcode150"],
  "category": "Linked List",
  "difficulty": "Medium",
  "description": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n\nReturn the head of the copied linked list.\n\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n- val: an integer representing Node.val\n- random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n\nYour code will only be given the head of the original linked list.",
  "constraints": [
    "0 <= n <= 1000",
    "-104 <= Node.val <= 104",
    "Node.random is null or pointing to a node in the linked list"
  ],
  "testCases": [
    {
      "input": {
        "head": [
          [7, null],
          [13, 0],
          [11, 4],
          [10, 2],
          [1, 0]
        ]
      },
      "output": [
        [7, null],
        [13, 0],
        [11, 4],
        [10, 2],
        [1, 0]
      ],
      "explanation": "The copied list maintains the same structure and random pointers as the original."
    },
    {
      "input": {
        "head": [
          [1, 1],
          [2, 1]
        ]
      },
      "output": [
        [1, 1],
        [2, 1]
      ],
      "explanation": "Both nodes point to each other in both original and copied lists."
    },
    {
      "input": {
        "head": [
          [3, null],
          [3, 0],
          [3, null]
        ]
      },
      "output": [
        [3, null],
        [3, 0],
        [3, null]
      ],
      "explanation": "The copied list maintains the same random pointer structure."
    },
    {
      "input": {
        "head": []
      },
      "output": [],
      "explanation": "Empty list returns empty list."
    }
  ],
  "solution": {
    "code": "# Definition for a Node.\n# class Node:\n#     def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n#         self.val = int(x)\n#         self.next = next\n#         self.random = random\n\ndef copyRandomList(head):\n    if not head:\n        return None\n    \n    # Step 1: Create interweaved list (original -> copy -> original -> copy...)\n    current = head\n    while current:\n        # Create copy node\n        copy = Node(current.val)\n        copy.next = current.next\n        current.next = copy\n        current = copy.next\n    \n    # Step 2: Set random pointers for copy nodes\n    current = head\n    while current:\n        if current.random:\n            current.next.random = current.random.next\n        current = current.next.next\n    \n    # Step 3: Separate original and copy lists\n    dummy = Node(0)\n    copy_current = dummy\n    current = head\n    \n    while current:\n        # Extract copy node\n        copy_current.next = current.next\n        copy_current = copy_current.next\n        \n        # Restore original list\n        current.next = current.next.next\n        current = current.next\n    \n    return dummy.next",
    "explanation": "Three-step approach:\n1. Create copy nodes and interweave them with original nodes\n2. Set random pointers for copy nodes using the interweaved structure\n3. Separate the original and copy lists\n\nTime complexity: O(n)\nSpace complexity: O(1) extra space (not counting the copy list)\n\nThe interweaving approach is most efficient as it uses constant extra space."
  }
}
