{
  "id": 124,
  "title": "Binary Tree Maximum Path Sum",
  "list": ["neetcode150"],
  "category": "Trees",
  "difficulty": "Hard",
  "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n\nThe path sum of a path is the sum of the node's values in the path.\n\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.",
  "constraints": [
    "The number of nodes in the tree is in the range [1, 3 * 104]",
    "-1000 <= Node.val <= 1000"
  ],
  "testCases": [
    {
      "input": {
        "root": [1, 2, 3]
      },
      "output": 6,
      "explanation": "The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."
    },
    {
      "input": {
        "root": [-10, 9, 20, null, null, 15, 7]
      },
      "output": 42,
      "explanation": "The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
    },
    {
      "input": {
        "root": [2, -1]
      },
      "output": 2,
      "explanation": "The optimal path is just the root node with value 2."
    },
    {
      "input": {
        "root": [-3]
      },
      "output": -3,
      "explanation": "The optimal path is just the root node with value -3."
    }
  ],
  "solution": {
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef maxPathSum(root):\n    # Global variable to track maximum path sum\n    max_sum = float('-inf')\n    \n    def dfs(node):\n        nonlocal max_sum\n        \n        if not node:\n            return 0\n        \n        # Get maximum path sum from left and right subtrees\n        left_sum = max(dfs(node.left), 0)\n        right_sum = max(dfs(node.right), 0)\n        \n        # Calculate path sum through current node\n        path_sum = node.val + left_sum + right_sum\n        \n        # Update global maximum\n        max_sum = max(max_sum, path_sum)\n        \n        # Return maximum path sum that can be extended by parent\n        return node.val + max(left_sum, right_sum)\n    \n    dfs(root)\n    return max_sum",
    "explanation": "This solution uses recursive DFS with a global variable:\n- For each node, calculate maximum path sum through it\n- Keep track of global maximum path sum\n- Return maximum single path sum for parent\n- Time complexity: O(n) where n is the number of nodes\n- Space complexity: O(h) where h is the height of the tree"
  }
}
