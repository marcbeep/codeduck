{
  "id": 416,
  "title": "Partition Equal Subset Sum",
  "list": [
    "grind75"
  ],
  "category": "Dynamic Programming",
  "difficulty": "Medium",
  "description": "Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal.",
  "constraints": [
    "1 <= nums.length <= 200",
    "1 <= nums[i] <= 100"
  ],
  "testCases": [
    {
      "input": {
        "nums": [
          1,
          5,
          11,
          5
        ]
      },
      "output": true,
      "explanation": "The array can be partitioned as [1, 5, 5] and [11]."
    },
    {
      "input": {
        "nums": [
          1,
          2,
          3,
          5
        ]
      },
      "output": false,
      "explanation": "The array cannot be partitioned into equal sum subsets."
    },
    {
      "input": {
        "nums": [
          1,
          2,
          5
        ]
      },
      "output": false,
      "explanation": "The array cannot be partitioned into equal sum subsets."
    }
  ],
  "solution": {
    "code": "def canPartition(nums: list[int]) -> bool:\n    total_sum = sum(nums)\n    \n    # If total sum is odd, we cannot partition into equal subsets\n    if total_sum % 2 != 0:\n        return False\n    \n    target = total_sum // 2\n    n = len(nums)\n    \n    # dp[i][j] represents if we can form sum j using first i elements\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    \n    # Base case: empty subset can form sum 0\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            # If current element is greater than target, skip it\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                # Either include current element or exclude it\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]",
    "explanation": "This solution uses dynamic programming to solve the subset sum problem:\n1. First, we check if the total sum is even (if odd, we cannot partition equally)\n2. We need to find if there's a subset that sums to total_sum // 2\n3. We use a 2D DP array where dp[i][j] represents if we can form sum j using first i elements\n4. Base case: dp[i][0] = True (empty subset can form sum 0)\n5. For each element, we can either include it or exclude it\n6. We return dp[n][target] which represents if we can form the target sum\n\nExample: nums = [1, 5, 11, 5], target = 11\n- dp[1][1] = True (using first element)\n- dp[2][6] = True (using first two elements)\n- dp[4][11] = True (using elements 1, 5, 5)\n\nThe time complexity is O(n * target) where n is the length of nums and target is total_sum // 2. The space complexity is O(n * target) for the DP array."
  }
}
