{
  "id": 226,
  "title": "Invert Binary Tree",
  "list": ["grind75", "neetcode150", "marc30"],
  "category": "Trees",
  "difficulty": "Easy",
  "description": "Given the root of a binary tree, invert the tree, and return its root.\n\nTo invert a binary tree, swap every left node with its corresponding right node.",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 100]",
    "-100 <= Node.val <= 100"
  ],
  "testCases": [
    {
      "input": {
        "root": [4, 2, 7, 1, 3, 6, 9]
      },
      "output": [4, 7, 2, 9, 6, 3, 1],
      "explanation": "The tree is inverted by swapping left and right children of each node."
    },
    {
      "input": {
        "root": [2, 1, 3]
      },
      "output": [2, 3, 1],
      "explanation": "Simple case with just root and two children."
    },
    {
      "input": {
        "root": []
      },
      "output": [],
      "explanation": "Empty tree remains empty."
    }
  ],
  "solution": {
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef invert_tree(root):\n    # Base case: if root is None, return None\n    if not root:\n        return None\n    \n    # Swap left and right children\n    root.left, root.right = root.right, root.left\n    \n    # Recursively invert left and right subtrees\n    invert_tree(root.left)\n    invert_tree(root.right)\n    \n    return root",
    "explanation": "This solution uses recursive DFS:\n- Base case: if root is None, return None\n- Swap left and right children of current node\n- Recursively invert left and right subtrees\n- Time complexity: O(n) where n is the number of nodes\n- Space complexity: O(h) where h is the height of the tree"
  }
}
