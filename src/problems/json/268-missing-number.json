{
  "id": 268,
  "title": "Missing Number",
  "list": ["neetcode150"],
  "category": "Bit Manipulation",
  "difficulty": "Easy",
  "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
  "constraints": [
    "n == nums.length",
    "0 <= nums[i] <= n",
    "All the numbers of nums are unique."
  ],
  "testCases": [
    {
      "input": { "nums": [3, 0, 1] },
      "output": 2,
      "explanation": "2 is missing from [0,1,3]."
    },
    {
      "input": { "nums": [0, 1] },
      "output": 2,
      "explanation": "2 is missing from [0,1]."
    },
    {
      "input": { "nums": [9, 6, 4, 2, 3, 5, 7, 0, 1] },
      "output": 8,
      "explanation": "8 is missing from [0,1,2,3,4,5,6,7,9]."
    }
  ],
  "solution": {
    "code": "def missingNumber(nums: list[int]) -> int:\n    result = len(nums)\n    for i, num in enumerate(nums):\n        result ^= i ^ num\n    return result",
    "explanation": "We XOR all indices and values. The missing number remains. Time complexity is O(n), space is O(1)."
  }
}
