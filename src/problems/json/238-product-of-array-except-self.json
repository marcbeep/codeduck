{
  "id": 238,
  "title": "Product of Array Except Self",
  "list": [
    "grind75"
  ],
  "category": "Array",
  "difficulty": "Medium",
  "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.",
  "constraints": [
    "2 <= nums.length <= 105",
    "-30 <= nums[i] <= 30",
    "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer"
  ],
  "testCases": [
    {
      "input": {
        "nums": [
          1,
          2,
          3,
          4
        ]
      },
      "output": [
        24,
        12,
        8,
        6
      ],
      "explanation": "answer[0] = 2*3*4 = 24, answer[1] = 1*3*4 = 12, answer[2] = 1*2*4 = 8, answer[3] = 1*2*3 = 6"
    },
    {
      "input": {
        "nums": [
          -1,
          1,
          0,
          -3,
          3
        ]
      },
      "output": [
        0,
        0,
        9,
        0,
        0
      ],
      "explanation": "answer[0] = 1*0*(-3)*3 = 0, answer[1] = (-1)*0*(-3)*3 = 0, answer[2] = (-1)*1*(-3)*3 = 9, answer[3] = (-1)*1*0*3 = 0, answer[4] = (-1)*1*0*(-3) = 0"
    }
  ],
  "solution": {
    "code": "def product_except_self(nums: list[int]) -> list[int]:\n    n = len(nums)\n    result = [1] * n\n    \n    # Calculate left products (products of all elements to the left)\n    left_product = 1\n    for i in range(n):\n        result[i] = left_product\n        left_product *= nums[i]\n    \n    # Calculate right products and combine with left products\n    right_product = 1\n    for i in range(n-1, -1, -1):\n        result[i] *= right_product\n        right_product *= nums[i]\n    \n    return result",
    "explanation": "This solution uses a two-pass approach with O(n) time complexity:\n1. First pass: Calculate products of all elements to the left of each position\n2. Second pass: Calculate products of all elements to the right and multiply with left products\n3. The result for each position is left_product * right_product\n4. We use a single result array to store both left products and final results\n\nThe time complexity is O(n) as we make two passes through the array. The space complexity is O(1) if we don't count the output array.\n\nKey insights:\n- We can't use division, so we need to use multiplication\n- The product except self = product of all elements to the left * product of all elements to the right\n- We can calculate left and right products in separate passes\n- We can reuse the result array to save space\n- The algorithm handles zero values correctly\n\nExample: For [1,2,3,4]:\n- Left products: [1, 1, 2, 6]\n- Right products: [24, 12, 4, 1]\n- Final result: [24, 12, 8, 6]"
  }
}
