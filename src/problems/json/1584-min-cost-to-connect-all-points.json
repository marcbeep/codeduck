{
  "id": 1584,
  "title": "Min Cost to Connect All Points",
  "list": ["neetcode150"],
  "category": "Advanced Graphs",
  "difficulty": "Medium",
  "description": "You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\n\nThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\n\nReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.",
  "constraints": [
    "1 <= points.length <= 1000",
    "-106 <= xi, yi <= 106",
    "All pairs (xi, yi) are unique."
  ],
  "testCases": [
    {
      "input": {
        "points": [
          [0, 0],
          [2, 2],
          [3, 10],
          [5, 2],
          [7, 0]
        ]
      },
      "output": 20,
      "explanation": "Connect points in this order: 0->2->3->4->1. Total cost = 2 + 8 + 2 + 8 = 20."
    },
    {
      "input": {
        "points": [
          [3, 12],
          [-2, 5],
          [-4, 1]
        ]
      },
      "output": 18,
      "explanation": "Connect points in this order: -4->-2->3. Total cost = 6 + 12 = 18."
    }
  ],
  "solution": {
    "code": "class UnionFind:\n def __init__(self, n):\n self.parent = list(range(n))\n self.rank = [0] * n\n \n def find(self, x):\n if self.parent[x] != x:\n self.parent[x] = self.find(self.parent[x])\n return self.parent[x]\n \n def union(self, x, y):\n px, py = self.find(x), self.find(y)\n if px == py:\n return False\n if self.rank[px] < self.rank[py]:\n px, py = py, px\n self.parent[py] = px\n if self.rank[px] == self.rank[py]:\n self.rank[px] += 1\n return True\n\ndef minCostConnectPoints(points: list[list[int]]) -> int:\n n = len(points)\n edges = []\n \n # Create all possible edges with their costs\n for i in range(n):\n for j in range(i + 1, n):\n cost = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n edges.append((cost, i, j))\n \n # Sort edges by cost\n edges.sort()\n \n # Kruskal's algorithm\n uf = UnionFind(n)\n total_cost = 0\n edges_used = 0\n \n for cost, u, v in edges:\n if uf.union(u, v):\n total_cost += cost\n edges_used += 1\n if edges_used == n - 1:\n break\n \n return total_cost",
    "explanation": "This solution uses Kruskal's algorithm to find the minimum spanning tree:\n1. Create all possible edges between points with their Manhattan distance costs\n2. Sort edges by cost in ascending order\n3. Use Union-Find data structure to detect cycles\n4. Add edges to the MST if they don't create a cycle\n5. Stop when we have n-1 edges (complete MST)\n\nTime complexity: O(n² log n) where n is the number of points\nSpace complexity: O(n²)"
  }
}
