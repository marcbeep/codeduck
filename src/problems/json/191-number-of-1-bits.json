{
  "id": 191,
  "title": "Number of 1 Bits",
  "list": ["neetcode150"],
  "category": "Bit Manipulation",
  "difficulty": "Easy",
  "description": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).",
  "constraints": ["The input must be a binary string of length 32."],
  "testCases": [
    {
      "input": { "n": 11 },
      "output": 3,
      "explanation": "11 in binary is 1011, which has three '1' bits."
    },
    {
      "input": { "n": 128 },
      "output": 1,
      "explanation": "128 in binary is 10000000, which has one '1' bit."
    },
    {
      "input": { "n": 4294967293 },
      "output": 31,
      "explanation": "4294967293 in binary is 11111111111111111111111111111101, which has thirty-one '1' bits."
    }
  ],
  "solution": {
    "code": "def hammingWeight(n: int) -> int:\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count",
    "explanation": "We repeatedly flip the least-significant '1' bit of n to 0 and count how many times this is done. Time complexity is O(1) since the integer is fixed size."
  }
}
