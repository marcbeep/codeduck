{
  "id": 153,
  "title": "Find Minimum in Rotated Sorted Array",
  "list": ["neetcode150"],
  "category": "Binary Search",
  "difficulty": "Medium",
  "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n\n- [4,5,6,7,0,1,2] if it was rotated 4 times.\n- [0,1,2,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\n\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\n\nYou must write an algorithm that runs in O(log n) time.",
  "constraints": [
    "n == nums.length",
    "1 <= n <= 5000",
    "-5000 <= nums[i] <= 5000",
    "All the integers of nums are unique",
    "nums is sorted and rotated between 1 and n times"
  ],
  "testCases": [
    {
      "input": {
        "nums": [3, 4, 5, 1, 2]
      },
      "output": 1,
      "explanation": "The original array was [1,2,3,4,5] rotated 3 times."
    },
    {
      "input": {
        "nums": [4, 5, 6, 7, 0, 1, 2]
      },
      "output": 0,
      "explanation": "The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."
    },
    {
      "input": {
        "nums": [11, 13, 15, 17]
      },
      "output": 11,
      "explanation": "The original array was [11,13,15,17] and it was rotated 4 times."
    }
  ],
  "solution": {
    "code": "def find_min(nums: list[int]) -> int:\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # If middle element is greater than rightmost element,\n        # the minimum is in the right half\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            # If middle element is less than or equal to rightmost element,\n            # the minimum is in the left half (including mid)\n            right = mid\n    \n    return nums[left]",
    "explanation": "This solution uses binary search with O(log n) time complexity:\n1. We use binary search to find the minimum element in the rotated sorted array\n2. At each step, we compare the middle element with the rightmost element\n3. If nums[mid] > nums[right], the minimum is in the right half (excluding mid)\n4. If nums[mid] <= nums[right], the minimum is in the left half (including mid)\n5. We continue until left == right, which gives us the minimum element\n\nKey insights:\n- In a rotated sorted array, the minimum element is the pivot point\n- The minimum element is always less than or equal to all elements to its right\n- The minimum element is always less than or equal to all elements to its left\n- We compare with the rightmost element to determine which half to search\n- We include mid in the left half when nums[mid] <= nums[right] because mid could be the minimum\n\nExample: nums = [3,4,5,1,2]\n- left = 0, right = 4, mid = 2, nums[mid] = 5, nums[right] = 2\n- 5 > 2, so search right half: left = 3, right = 4\n- mid = 3, nums[mid] = 1, nums[right] = 2\n- 1 <= 2, so search left half (including mid): left = 3, right = 3\n- left == right, return nums[3] = 1\n\nThe time complexity is O(log n) as we use binary search. The space complexity is O(1) as we only use constant extra space."
  }
}
