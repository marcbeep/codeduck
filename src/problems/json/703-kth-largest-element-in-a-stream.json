{
  "id": 703,
  "title": "Kth Largest Element In a Stream",
  "list": ["neetcode150"],
  "category": "Heap / Priority Queue",
  "difficulty": "Easy",
  "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\nImplement KthLargest class:\n- KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\n- int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.",
  "constraints": [
    "1 <= k <= 104",
    "0 <= nums.length <= 104",
    "-104 <= nums[i] <= 104",
    "-104 <= val <= 104",
    "At most 104 calls will be made to add",
    "It is guaranteed that there will be at least k elements in the array when you search for the kth element"
  ],
  "testCases": [
    {
      "input": {
        "operations": ["KthLargest", "add", "add", "add", "add", "add"],
        "values": [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
      },
      "output": [null, 4, 5, 5, 8, 8],
      "explanation": "KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8"
    },
    {
      "input": {
        "operations": ["KthLargest", "add", "add", "add"],
        "values": [[1, []], [-3], [-2], [-4]]
      },
      "output": [null, -3, -2, -2],
      "explanation": "KthLargest kthLargest = new KthLargest(1, []);\nkthLargest.add(-3);  // return -3\nkthLargest.add(-2);  // return -2\nkthLargest.add(-4);  // return -2"
    }
  ],
  "solution": {
    "code": "import heapq\n\nclass KthLargest:\n    def __init__(self, k: int, nums: list[int]):\n        self.k = k\n        # Use min heap to keep k largest elements\n        self.min_heap = []\n        \n        # Add initial elements\n        for num in nums:\n            self.add(num)\n    \n    def add(self, val: int) -> int:\n        # Add to heap\n        heapq.heappush(self.min_heap, val)\n        \n        # Keep only k largest elements\n        if len(self.min_heap) > self.k:\n            heapq.heappop(self.min_heap)\n        \n        # Return kth largest (smallest in min heap)\n        return self.min_heap[0]",
    "explanation": "Use a min heap to keep the k largest elements:\n1. Initialize with empty min heap\n2. For each number:\n   - Add to heap\n   - If heap size > k, remove smallest element\n3. Return smallest element in heap (kth largest)\n\nTime complexity: O(log k) for add, Space complexity: O(k)"
  }
}
