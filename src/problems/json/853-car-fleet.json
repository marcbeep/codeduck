{
  "id": 853,
  "title": "Car Fleet",
  "list": ["neetcode150"],
  "category": "Stack",
  "difficulty": "Medium",
  "description": "There are n cars going to the same destination along a one-lane road. The destination is target miles away.\n\nYou are given two integer arrays position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).\n\nA car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).\n\nA car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.\n\nIf a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\n\nReturn the number of car fleets that will arrive at the destination.",
  "constraints": [
    "n == position.length == speed.length",
    "1 <= n <= 105",
    "0 < target <= 106",
    "0 <= position[i] < target",
    "All the values of position are unique",
    "0 < speed[i] <= 106"
  ],
  "testCases": [
    {
      "input": {
        "target": 12,
        "position": [10, 8, 0, 5, 3],
        "speed": [2, 4, 1, 1, 3]
      },
      "output": 3,
      "explanation": "The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The car starting at 0 does not catch up to any other car, so it is a fleet by itself. The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target. Note that no other cars meet these fleets before the destination, so the answer is 3."
    },
    {
      "input": {
        "target": 10,
        "position": [3],
        "speed": [3]
      },
      "output": 1,
      "explanation": "There is only one car, hence there is only one fleet."
    },
    {
      "input": {
        "target": 100,
        "position": [0, 2, 4],
        "speed": [4, 2, 1]
      },
      "output": 1,
      "explanation": "The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2. Then, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target."
    }
  ],
  "solution": {
    "code": "def car_fleet(target: int, position: list[int], speed: list[int]) -> int:\n    # Create pairs of (position, speed) and sort by position in descending order\n    cars = sorted(zip(position, speed), reverse=True)\n    stack = []\n    \n    for pos, spd in cars:\n        # Calculate time to reach target\n        time = (target - pos) / spd\n        \n        # If stack is empty or current car takes longer to reach target\n        # than the car in front, it becomes a new fleet\n        if not stack or time > stack[-1]:\n            stack.append(time)\n    \n    return len(stack)",
    "explanation": "This solution uses a stack with O(n log n) time complexity:\n1. We create pairs of (position, speed) and sort them by position in descending order\n2. We process cars from closest to target to farthest from target\n3. For each car, we calculate the time it takes to reach the target\n4. We use a stack to keep track of the arrival times of car fleets\n5. If the current car takes longer to reach target than the car in front, it becomes a new fleet\n6. Otherwise, it joins the fleet in front of it\n\nKey insights:\n- Cars closer to target are processed first\n- A car can only catch up to cars in front of it\n- If a car takes longer to reach target than the car in front, it can't catch up\n- The stack stores the arrival times of car fleets\n- The number of fleets is the number of unique arrival times\n\nExample: target = 12, position = [10, 8, 0, 5, 3], speed = [2, 4, 1, 1, 3]\n- Sorted cars: [(10,2), (8,4), (5,1), (3,3), (0,1)]\n- Car at 10: time = (12-10)/2 = 1, stack = [1]\n- Car at 8: time = (12-8)/4 = 1, stack = [1] (joins fleet)\n- Car at 5: time = (12-5)/1 = 7, stack = [1, 7]\n- Car at 3: time = (12-3)/3 = 3, stack = [1, 7] (joins fleet at 5)\n- Car at 0: time = (12-0)/1 = 12, stack = [1, 7, 12]\n\nResult: 3 fleets\n\nThe time complexity is O(n log n) due to sorting. The space complexity is O(n) for the stack."
  }
}
