{
  "id": 100,
  "title": "Same Tree",
  "list": ["neetcode150"],
  "category": "Trees",
  "difficulty": "Easy",
  "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
  "constraints": [
    "The number of nodes in both trees is in the range [0, 100]",
    "-104 <= Node.val <= 104"
  ],
  "testCases": [
    {
      "input": {
        "p": [1, 2, 3],
        "q": [1, 2, 3]
      },
      "output": true,
      "explanation": "Both trees have the same structure and values."
    },
    {
      "input": {
        "p": [1, 2],
        "q": [1, null, 2]
      },
      "output": false,
      "explanation": "Trees have different structures."
    },
    {
      "input": {
        "p": [1, 2, 1],
        "q": [1, 1, 2]
      },
      "output": false,
      "explanation": "Trees have same structure but different values."
    },
    {
      "input": {
        "p": [],
        "q": []
      },
      "output": true,
      "explanation": "Both trees are empty."
    }
  ],
  "solution": {
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef isSameTree(p, q):\n    # Base case: if both nodes are None, they are the same\n    if not p and not q:\n        return True\n    \n    # If one node is None and the other is not, they are different\n    if not p or not q:\n        return False\n    \n    # Check if current nodes have the same value\n    if p.val != q.val:\n        return False\n    \n    # Recursively check left and right subtrees\n    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)",
    "explanation": "This solution uses recursive DFS:\n- Base case: if both nodes are None, return True\n- If one node is None and the other is not, return False\n- Check if current nodes have the same value\n- Recursively check left and right subtrees\n- Time complexity: O(min(n, m)) where n and m are the number of nodes\n- Space complexity: O(min(h1, h2)) where h1 and h2 are the heights"
  }
}
