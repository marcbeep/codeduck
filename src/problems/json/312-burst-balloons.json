{
  "id": 312,
  "title": "Burst Balloons",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Hard",
  "description": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\n\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\n\nReturn the maximum coins you can collect by bursting the balloons wisely.",
  "constraints": ["n == nums.length", "1 <= n <= 300", "0 <= nums[i] <= 100"],
  "testCases": [
    {
      "input": {
        "nums": [3, 1, 5, 8]
      },
      "output": 167,
      "explanation": "nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167"
    },
    {
      "input": {
        "nums": [1, 5]
      },
      "output": 10,
      "explanation": "nums = [1,5] --> [5] --> []\ncoins = 1*1*5 + 1*5*1 = 10"
    },
    {
      "input": {
        "nums": [1]
      },
      "output": 1,
      "explanation": "Only one balloon, burst it to get 1*1*1 = 1 coin."
    }
  ],
  "solution": {
    "code": "def maxCoins(nums: list[int]) -> int:\n    # Add 1s at boundaries\n    nums = [1] + nums + [1]\n    n = len(nums)\n    \n    # dp[i][j] = max coins from bursting balloons in range (i,j)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill DP table diagonally (length of subarray)\n    for length in range(2, n):\n        for left in range(n - length):\n            right = left + length\n            # Try each balloon as the last one to burst\n            for k in range(left + 1, right):\n                coins = nums[left] * nums[k] * nums[right]\n                dp[left][right] = max(dp[left][right], \n                                     coins + dp[left][k] + dp[k][right])\n    \n    return dp[0][n-1]",
    "explanation": "This solution uses 2-D DP with reverse thinking:\n1. Instead of bursting first, think about bursting last\n2. dp[i][j] = max coins from range (i,j) with boundaries i,j intact\n3. For each subarray, try each balloon as the last one to burst\n4. When bursting balloon k last: coins = nums[i] * nums[k] * nums[j]\n5. Total = coins + dp[i][k] + dp[k][j]\n\nKey insight: Work backwards to avoid dependency issues.\n\nTime complexity: O(n³), Space complexity: O(n²)"
  }
}
