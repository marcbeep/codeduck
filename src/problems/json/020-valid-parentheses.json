{
  "id": 20,
  "title": "Valid Parentheses",
  "list": ["grind75"],
  "category": "Stack",
  "difficulty": "Easy",
  "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
  "constraints": [
    "1 <= s.length <= 104",
    "s consists of parentheses only '()[]{}'"
  ],
  "testCases": [
    {
      "input": {
        "s": "()"
      },
      "output": true,
      "explanation": "Simple valid case with matching parentheses."
    },
    {
      "input": {
        "s": "()[]{}"
      },
      "output": true,
      "explanation": "Valid case with multiple types of brackets."
    },
    {
      "input": {
        "s": "(]"
      },
      "output": false,
      "explanation": "Invalid case with mismatched brackets."
    },
    {
      "input": {
        "s": "([)]"
      },
      "output": false,
      "explanation": "Invalid case with incorrectly nested brackets."
    },
    {
      "input": {
        "s": "{[]}"
      },
      "output": true,
      "explanation": "Valid case with nested brackets."
    }
  ],
  "solution": {
    "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        pairs = {\n            \")\" : \"(\",\n            \"}\" : \"{\",\n            \"]\" : \"[\"\n        }\n\n        for bracket in s:\n            if bracket in pairs:\n                # if the stack is not empty and \n                # the top is equal to the current bracket\n                if stack and stack[-1] == pairs[bracket]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(bracket)\n        return len(stack) == 0",
    "explanation": "This solution uses a stack to validate parentheses:\n1. We maintain a stack to keep track of opening brackets\n2. We use a dictionary to map closing brackets to their corresponding opening brackets\n3. For each character in the string:\n   - If it's a closing bracket, we check if the top of stack matches its opening pair\n   - If it's an opening bracket, we push it onto the stack\n4. The string is valid if the stack is empty at the end\n\nThe time complexity is O(n) as we process each character once. The space complexity is O(n) as we might need to store all characters in the stack in the worst case."
  }
}
