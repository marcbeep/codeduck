{
  "id": 271,
  "title": "Encode and Decode Strings",
  "list": ["neetcode150"],
  "category": "Arrays & Hashing",
  "difficulty": "Medium",
  "description": "Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.\n\nPlease implement encode and decode.",
  "constraints": [
    "1 <= strs.length <= 200",
    "0 <= strs[i].length <= 200",
    "strs[i] contains any possible characters out of 256 valid ASCII characters"
  ],
  "testCases": [
    {
      "input": {
        "strs": ["Hello", "World"]
      },
      "output": ["Hello", "World"],
      "explanation": "Encode: '5#Hello5#World', Decode: ['Hello', 'World']"
    },
    {
      "input": {
        "strs": [""]
      },
      "output": [""],
      "explanation": "Encode: '0#', Decode: ['']"
    },
    {
      "input": {
        "strs": ["Hello", "", "World"]
      },
      "output": ["Hello", "", "World"],
      "explanation": "Encode: '5#Hello0#5#World', Decode: ['Hello', '', 'World']"
    }
  ],
  "solution": {
    "code": "class Codec:\n    def encode(self, strs: list[str]) -> str:\n        \"\"\"Encodes a list of strings to a single string.\"\"\"\n        encoded = \"\"\n        for s in strs:\n            # Format: length#string\n            encoded += str(len(s)) + \"#\" + s\n        return encoded\n    \n    def decode(self, s: str) -> list[str]:\n        \"\"\"Decodes a single string to a list of strings.\"\"\"\n        result = []\n        i = 0\n        \n        while i < len(s):\n            # Find the delimiter '#'\n            delimiter_pos = s.find('#', i)\n            \n            # Extract length\n            length = int(s[i:delimiter_pos])\n            \n            # Extract string\n            start = delimiter_pos + 1\n            end = start + length\n            result.append(s[start:end])\n            \n            # Move to next string\n            i = end\n        \n        return result",
    "explanation": "Encode: For each string, store its length followed by '#' and then the string. Decode: Parse length, then extract the string of that length. Time: O(n). Space: O(n)."
  }
}
