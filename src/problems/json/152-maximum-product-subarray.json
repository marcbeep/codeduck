{
  "id": 152,
  "title": "Maximum Product Subarray",
  "list": ["neetcode150"],
  "category": "1-D DP",
  "difficulty": "Medium",
  "description": "Given an integer array nums, find a subarray that has the largest product, and return the product.\n\nThe test cases are generated so that the answer will fit in a 32-bit integer.",
  "constraints": [
    "1 <= nums.length <= 2 * 104",
    "-10 <= nums[i] <= 10",
    "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
  ],
  "testCases": [
    {
      "input": {
        "nums": [2, 3, -2, 4]
      },
      "output": 6,
      "explanation": "The subarray [2, 3] has the largest product 6."
    },
    {
      "input": {
        "nums": [-2, 0, -1]
      },
      "output": 0,
      "explanation": "The result cannot be 2, because [-2,-1] is not a subarray."
    }
  ],
  "solution": {
    "code": "def maxProduct(nums: list[int]) -> int:\n    if not nums:\n        return 0\n    \n    # Keep track of both max and min products\n    # Min is needed because negative * negative = positive\n    max_prod = min_prod = result = nums[0]\n    \n    for i in range(1, len(nums)):\n        # Calculate new max and min products\n        # We need to consider: current number, max_prod * current, min_prod * current\n        temp_max = max(nums[i], max_prod * nums[i], min_prod * nums[i])\n        temp_min = min(nums[i], max_prod * nums[i], min_prod * nums[i])\n        \n        max_prod, min_prod = temp_max, temp_min\n        result = max(result, max_prod)\n    \n    return result",
    "explanation": "This solution uses dynamic programming with constant space:\n1. We keep track of both maximum and minimum products ending at each position\n2. For each number, we calculate three possibilities:\n   - Start a new subarray with current number\n   - Multiply current number with previous max product\n   - Multiply current number with previous min product (handles negative cases)\n3. We update our max and min products and keep track of the global maximum\n4. The final answer is the global maximum product\n\nThe time complexity is O(n) as we iterate through the array once. The space complexity is O(1) as we only use a constant amount of extra space.\n\nKey insight: We need to track both max and min because multiplying by a negative number can turn a minimum into a maximum."
  }
}
