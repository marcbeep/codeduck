{
  "id": 973,
  "title": "K Closest Points to Origin",
  "list": ["grind75"],
  "category": "Heap / Priority Queue",
  "difficulty": "Medium",
  "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\n\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).\n\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).",
  "constraints": ["1 <= k <= points.length <= 104", "-104 < xi, yi < 104"],
  "testCases": [
    {
      "input": {
        "points": [
          [1, 3],
          [-2, 2]
        ],
        "k": 1
      },
      "output": [[-2, 2]],
      "explanation": "The distance between (1, 3) and the origin is sqrt(10). The distance between (-2, 2) and the origin is sqrt(8). Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin. We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]."
    },
    {
      "input": {
        "points": [
          [3, 3],
          [5, -1],
          [-2, 4]
        ],
        "k": 2
      },
      "output": [
        [3, 3],
        [-2, 4]
      ],
      "explanation": "The answer [[-2,4],[3,3]] would also be accepted."
    },
    {
      "input": {
        "points": [
          [0, 1],
          [1, 0]
        ],
        "k": 2
      },
      "output": [
        [0, 1],
        [1, 0]
      ],
      "explanation": "Both points are at equal distance from origin."
    }
  ],
  "solution": {
    "code": "import heapq\n\ndef k_closest(points: list[list[int]], k: int) -> list[list[int]]:\n    # Create a max heap (negative distances for max heap behavior)\n    heap = []\n    \n    for point in points:\n        # Calculate squared distance (avoiding sqrt for efficiency)\n        distance = point[0]**2 + point[1]**2\n        \n        # Push negative distance to create max heap\n        heapq.heappush(heap, (-distance, point))\n        \n        # Keep only k closest points\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Extract points from heap (without distances)\n    return [point for _, point in heap]",
    "explanation": "This solution uses a max heap with O(n log k) time complexity:\n1. We iterate through all points and calculate their squared distance from origin\n2. We use a max heap to keep track of the k smallest distances\n3. For each point, we push it into the heap with negative distance (to create max heap)\n4. If heap size exceeds k, we remove the largest element (farthest point)\n5. Finally, we extract the k closest points from the heap\n\nThe time complexity is O(n log k) as we perform at most n push/pop operations on a heap of size k. The space complexity is O(k) for the heap.\n\nKey insights:\n- We use squared distance to avoid expensive sqrt calculations\n- We use negative distances to create a max heap (heapq is min heap by default)\n- We only keep k elements in the heap at any time\n\nAlternative approaches:\n- Sort all points by distance: O(n log n) time, O(n) space\n- Quickselect algorithm: O(n) average time, O(1) space"
  }
}
