{
  "id": 50,
  "title": "Pow(x, n)",
  "list": ["neetcode150"],
  "category": "Math & Geometry",
  "difficulty": "Medium",
  "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).",
  "constraints": [
    "-100.0 < x < 100.0",
    "-231 <= n <= 231-1",
    "n is an integer",
    "-104 <= xn <= 104"
  ],
  "testCases": [
    {
      "input": {
        "x": 2.0,
        "n": 10
      },
      "output": 1024.0,
      "explanation": "2^10 = 1024"
    },
    {
      "input": {
        "x": 2.1,
        "n": 3
      },
      "output": 9.261,
      "explanation": "2.1^3 = 9.261"
    },
    {
      "input": {
        "x": 2.0,
        "n": -2
      },
      "output": 0.25,
      "explanation": "2^(-2) = 1/4 = 0.25"
    }
  ],
  "solution": {
    "code": "def myPow(x: float, n: int) -> float:\n    def fast_pow(x, n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        \n        # Use the property: x^n = (x^(n/2))^2\n        half = fast_pow(x, n // 2)\n        \n        if n % 2 == 0:\n            return half * half\n        else:\n            return half * half * x\n    \n    if n < 0:\n        x = 1 / x\n        n = -n\n    \n    return fast_pow(x, n)",
    "explanation": "This solution uses the fast exponentiation algorithm:\n1. Handle negative exponents by taking reciprocal of x\n2. Use the property: x^n = (x^(n/2))^2 for even n\n3. For odd n: x^n = (x^(n/2))^2 * x\n4. This reduces the number of multiplications from O(n) to O(log n)\n\nTime complexity: O(log n) - we divide n by 2 in each recursive call.\nSpace complexity: O(log n) - the depth of the recursion stack."
  }
}
