{
  "id": 1046,
  "title": "Last Stone Weight",
  "list": ["neetcode150"],
  "category": "Heap / Priority Queue",
  "difficulty": "Easy",
  "description": "You are given an array of integers stones where stones[i] is the weight of the ith stone.\n\nWe are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:\n- If x == y, both stones are destroyed, and\n- If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.\n\nAt the end of the game, there is at most one stone left.\n\nReturn the weight of the last remaining stone. If there are no stones left, return 0.",
  "constraints": ["1 <= stones.length <= 30", "1 <= stones[i] <= 1000"],
  "testCases": [
    {
      "input": {
        "stones": [2, 7, 4, 1, 8, 1]
      },
      "output": 1,
      "explanation": "We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone."
    },
    {
      "input": {
        "stones": [1]
      },
      "output": 1,
      "explanation": "Only one stone remains."
    },
    {
      "input": {
        "stones": [2, 2]
      },
      "output": 0,
      "explanation": "Both stones are destroyed, leaving 0."
    }
  ],
  "solution": {
    "code": "import heapq\n\ndef lastStoneWeight(stones):\n    # Convert to max heap by negating values\n    max_heap = [-stone for stone in stones]\n    heapq.heapify(max_heap)\n    \n    # Continue until at most one stone remains\n    while len(max_heap) > 1:\n        # Get the two heaviest stones\n        stone1 = -heapq.heappop(max_heap)\n        stone2 = -heapq.heappop(max_heap)\n        \n        # If stones are different, add the difference back\n        if stone1 != stone2:\n            heapq.heappush(max_heap, -(stone1 - stone2))\n        # If stones are equal, both are destroyed (no action needed)\n    \n    # Return the last remaining stone or 0\n    return -max_heap[0] if max_heap else 0\n\n# Alternative approach with explicit heap operations\ndef lastStoneWeightExplicit(stones):\n    if not stones:\n        return 0\n    \n    # Build max heap\n    max_heap = []\n    for stone in stones:\n        heapq.heappush(max_heap, -stone)\n    \n    while len(max_heap) > 1:\n        # Get two heaviest stones\n        heaviest = -heapq.heappop(max_heap)\n        second_heaviest = -heapq.heappop(max_heap)\n        \n        # Calculate difference\n        difference = heaviest - second_heaviest\n        \n        # Add difference back if not zero\n        if difference > 0:\n            heapq.heappush(max_heap, -difference)\n    \n    return -max_heap[0] if max_heap else 0\n\n# Alternative approach using sorting\ndef lastStoneWeightSorting(stones):\n    # Sort stones in descending order\n    stones = sorted(stones, reverse=True)\n    \n    while len(stones) > 1:\n        # Get two heaviest stones\n        stone1 = stones.pop(0)\n        stone2 = stones.pop(0)\n        \n        # Calculate difference\n        difference = stone1 - stone2\n        \n        # Insert difference back in sorted position\n        if difference > 0:\n            # Find insertion point\n            i = 0\n            while i < len(stones) and stones[i] > difference:\n                i += 1\n            stones.insert(i, difference)\n    \n    return stones[0] if stones else 0\n\n# Alternative approach with priority queue class\ndef lastStoneWeightClass(stones):\n    class PriorityQueue:\n        def __init__(self):\n            self.heap = []\n        \n        def push(self, item):\n            heapq.heappush(self.heap, -item)\n        \n        def pop(self):\n            return -heapq.heappop(self.heap)\n        \n        def size(self):\n            return len(self.heap)\n        \n        def peek(self):\n            return -self.heap[0] if self.heap else 0\n    \n    pq = PriorityQueue()\n    for stone in stones:\n        pq.push(stone)\n    \n    while pq.size() > 1:\n        stone1 = pq.pop()\n        stone2 = pq.pop()\n        \n        difference = stone1 - stone2\n        if difference > 0:\n            pq.push(difference)\n    \n    return pq.peek()",
    "explanation": "Four approaches are shown:\n\n1. Max heap approach (recommended):\n   - Use a max heap to efficiently get the two heaviest stones\n   - Negate values to simulate max heap with min heap\n   - Continue until at most one stone remains\n   - Time complexity: O(n log n) where n is the number of stones\n   - Space complexity: O(n)\n\n2. Explicit heap operations:\n   - Same logic as first approach but more explicit\n   - Clearer separation of operations\n   - Same time and space complexity\n\n3. Sorting approach:\n   - Sort stones in descending order\n   - Remove two heaviest stones and insert difference\n   - Less efficient but simpler to understand\n   - Time complexity: O(nÂ² log n)\n   - Space complexity: O(n)\n\n4. Priority queue class approach:\n   - Create a custom priority queue class\n   - Encapsulate heap operations\n   - Same logic but more object-oriented\n   - Time complexity: O(n log n)\n   - Space complexity: O(n)\n\nKey insight: We need to repeatedly find the two heaviest stones, which is efficiently done with a max heap.\n\nExample with [2,7,4,1,8,1]:\n- Initial heap: [8,7,4,2,1,1]\n- Smash 8,7: difference=1, heap becomes [4,2,1,1,1]\n- Smash 4,2: difference=2, heap becomes [2,1,1,1]\n- Smash 2,1: difference=1, heap becomes [1,1,1]\n- Smash 1,1: both destroyed, heap becomes [1]\n- Result: 1\n\nThe max heap approach is the most efficient and commonly used solution for this problem."
  }
}
