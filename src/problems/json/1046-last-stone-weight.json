{
  "id": 1046,
  "title": "Last Stone Weight",
  "list": ["neetcode150"],
  "category": "Heap / Priority Queue",
  "difficulty": "Easy",
  "description": "You are given an array of integers stones where stones[i] is the weight of the ith stone.\n\nWe are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:\n- If x == y, both stones are destroyed, and\n- If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.\n\nAt the end of the game, there is at most one stone left.\n\nReturn the weight of the last remaining stone. If there are no stones left, return 0.",
  "constraints": ["1 <= stones.length <= 30", "1 <= stones[i] <= 1000"],
  "testCases": [
    {
      "input": {
        "stones": [2, 7, 4, 1, 8, 1]
      },
      "output": 1,
      "explanation": "We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone."
    },
    {
      "input": {
        "stones": [1]
      },
      "output": 1,
      "explanation": "Only one stone remains."
    },
    {
      "input": {
        "stones": [2, 2]
      },
      "output": 0,
      "explanation": "Both stones are destroyed, leaving 0."
    }
  ],
  "solution": {
    "code": "import heapq\n\ndef lastStoneWeight(stones):\n    # Convert to max heap by negating values\n    max_heap = [-stone for stone in stones]\n    heapq.heapify(max_heap)\n    \n    # Continue until at most one stone remains\n    while len(max_heap) > 1:\n        # Get the two heaviest stones\n        stone1 = -heapq.heappop(max_heap)\n        stone2 = -heapq.heappop(max_heap)\n        \n        # If stones are different, add the difference back\n        if stone1 != stone2:\n            heapq.heappush(max_heap, -(stone1 - stone2))\n        # If stones are equal, both are destroyed (no action needed)\n    \n    # Return the last remaining stone or 0\n    return -max_heap[0] if max_heap else 0",
    "explanation": "Use a max heap to efficiently get the two heaviest stones:\n1. Convert array to max heap by negating values\n2. While heap has more than 1 stone:\n   - Extract two heaviest stones\n   - If different, add their difference back to heap\n   - If equal, both are destroyed\n3. Return the last remaining stone or 0\n\nTime complexity: O(n log n), Space complexity: O(n)"
  }
}
