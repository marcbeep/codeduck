{
  "id": 322,
  "title": "Coin Change",
  "list": ["grind75", "neetcode150", "marc30"],
  "category": "1-D DP",
  "difficulty": "Medium",
  "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\nYou may assume that you have an infinite number of each kind of coin.",
  "constraints": [
    "1 <= coins.length <= 12",
    "1 <= coins[i] <= 231 - 1",
    "0 <= amount <= 104"
  ],
  "testCases": [
    {
      "input": {
        "coins": [1, 2, 5],
        "amount": 11
      },
      "output": 3,
      "explanation": "11 = 5 + 5 + 1"
    },
    {
      "input": {
        "coins": [2],
        "amount": 3
      },
      "output": -1,
      "explanation": "It is impossible to make 3 with only coin of denomination 2."
    },
    {
      "input": {
        "coins": [1],
        "amount": 0
      },
      "output": 0,
      "explanation": "Amount 0 can be made with 0 coins."
    }
  ],
  "solution": {
    "code": "def coin_change(coins: list[int], amount: int) -> int:\n    # Initialize DP array with infinity\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0  # Base case: 0 amount needs 0 coins\n    \n    # Fill DP array\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[amount] if dp[amount] != float('inf') else -1",
    "explanation": "This solution uses dynamic programming:\n- dp[i] represents minimum coins needed for amount i\n- For each amount, try each coin denomination\n- Update dp[i] with minimum of current value and dp[i-coin] + 1\n- Time complexity: O(amount * len(coins)), Space complexity: O(amount)"
  }
}
