{
  "id": 42,
  "title": "Trapping Rain Water",
  "list": ["grind75", "neetcode150"],
  "category": "Two Pointers",
  "difficulty": "Hard",
  "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
  "constraints": [
    "n == height.length",
    "1 <= n <= 2 * 104",
    "0 <= height[i] <= 105"
  ],
  "testCases": [
    {
      "input": {
        "height": [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
      },
      "output": 6,
      "explanation": "The elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
    },
    {
      "input": {
        "height": [4, 2, 0, 3, 2, 5]
      },
      "output": 9,
      "explanation": "The elevation map is represented by array [4,2,0,3,2,5]. In this case, 9 units of rain water (blue section) are being trapped."
    },
    {
      "input": {
        "height": [1, 0, 1]
      },
      "output": 1,
      "explanation": "The elevation map is represented by array [1,0,1]. In this case, 1 unit of rain water (blue section) is being trapped."
    }
  ],
  "solution": {
    "code": "def trap(height: list[int]) -> int:\n    if not height:\n        return 0\n    \n    left, right = 0, len(height) - 1\n    left_max = right_max = 0\n    water = 0\n    \n    while left < right:\n        if height[left] < height[right]:\n            # Water can be trapped on the left side\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                water += left_max - height[left]\n            left += 1\n        else:\n            # Water can be trapped on the right side\n            if height[right] >= right_max:\n                right_max = height[right]\n            else:\n                water += right_max - height[right]\n            right -= 1\n    \n    return water",
    "explanation": "This solution uses the two-pointer approach:\n1. Use two pointers starting from the ends of the array\n2. Keep track of maximum heights seen from left and right\n3. Move the pointer with smaller height inward\n4. At each position, trap water if current height < maximum height from that side\n5. Amount of water = difference between maximum height and current height\n\nKey insight: We can safely move the pointer with smaller height because the water level is limited by the smaller of the two maximum heights.\n\nTime complexity: O(n), Space complexity: O(1)"
  }
}
