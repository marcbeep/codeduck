{
  "id": 494,
  "title": "Target Sum",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Medium",
  "description": "You are given an integer array nums and an integer target.\n\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n\nFor example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\nReturn the number of different expressions that you can build, which evaluates to target.",
  "constraints": [
    "1 <= nums.length <= 20",
    "0 <= nums[i] <= 1000",
    "0 <= sum(nums[i]) <= 1000",
    "-1000 <= target <= 1000"
  ],
  "testCases": [
    {
      "input": {
        "nums": [1, 1, 1, 1, 1],
        "target": 3
      },
      "output": 5,
      "explanation": "There are 5 ways to assign symbols to make the sum of nums be target 3:\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3"
    },
    {
      "input": {
        "nums": [1],
        "target": 1
      },
      "output": 1,
      "explanation": "Only one way: +1 = 1"
    },
    {
      "input": {
        "nums": [1, 0],
        "target": 1
      },
      "output": 2,
      "explanation": "Two ways: +1+0 = 1 or +1-0 = 1"
    }
  ],
  "solution": {
    "code": "def findTargetSumWays(nums: list[int], target: int) -> int:\n    # Convert to subset sum problem\n    # sum(positives) - sum(negatives) = target\n    # sum(positives) + sum(negatives) = sum(nums)\n    # 2 * sum(positives) = target + sum(nums)\n    # sum(positives) = (target + sum(nums)) // 2\n    \n    total = sum(nums)\n    if (target + total) % 2 != 0 or target > total or target < -total:\n        return 0\n    \n    subset_sum = (target + total) // 2\n    \n    # DP: dp[i] = ways to make sum i\n    dp = [0] * (subset_sum + 1)\n    dp[0] = 1\n    \n    for num in nums:\n        for i in range(subset_sum, num - 1, -1):\n            dp[i] += dp[i - num]\n    \n    return dp[subset_sum]",
    "explanation": "This solution converts the problem to subset sum:\n1. Let S be sum of positive numbers, T be sum of negative numbers\n2. S - T = target and S + T = sum(nums)\n3. Solving: S = (target + sum(nums)) // 2\n4. Now find number of ways to make sum S using positive numbers\n5. Use DP where dp[i] = ways to make sum i\n\nTime complexity: O(n * sum), Space complexity: O(sum)"
  }
}
