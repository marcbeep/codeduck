{
  "id": 309,
  "title": "Best Time to Buy and Sell Stock with Cooldown",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Medium",
  "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n\nAfter you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
  "constraints": ["1 <= prices.length <= 5000", "0 <= prices[i] <= 1000"],
  "testCases": [
    {
      "input": {
        "prices": [1, 2, 3, 0, 2]
      },
      "output": 3,
      "explanation": "Buy on day 1 (price = 1), sell on day 2 (price = 2), cooldown on day 3, buy on day 4 (price = 0), sell on day 5 (price = 2). Total profit = 2-1+2-0 = 3."
    },
    {
      "input": {
        "prices": [1]
      },
      "output": 0,
      "explanation": "Cannot make any profit with only one day."
    },
    {
      "input": {
        "prices": [1, 2, 4]
      },
      "output": 3,
      "explanation": "Buy on day 1 (price = 1), sell on day 3 (price = 4). Total profit = 4-1 = 3."
    }
  ],
  "solution": {
    "code": "def maxProfit(prices: list[int]) -> int:\n    if len(prices) <= 1:\n        return 0\n    \n    # DP states: [hold, not_hold]\n    # hold: max profit if we hold stock on day i\n    # not_hold: max profit if we don't hold stock on day i\n    hold = -prices[0]  # Buy first stock\n    not_hold = 0      # Don't buy anything\n    \n    for i in range(1, len(prices)):\n        prev_hold = hold\n        prev_not_hold = not_hold\n        \n        # Can hold if: bought today or held from yesterday\n        hold = max(prev_hold, prev_not_hold - prices[i])\n        # Can be not_hold if: sold today or was not_hold yesterday\n        not_hold = max(prev_not_hold, prev_hold + prices[i])\n    \n    return not_hold",
    "explanation": "This solution uses state machine DP with two states:\n1. hold: max profit if we hold stock on current day\n2. not_hold: max profit if we don't hold stock on current day\n\nFor each day:\n- hold = max(prev_hold, prev_not_hold - prices[i]) # buy or keep holding\n- not_hold = max(prev_not_hold, prev_hold + prices[i]) # sell or keep not holding\n\nThe cooldown is automatically handled because we can only buy from not_hold state.\n\nTime complexity: O(n), Space complexity: O(1)"
  }
}
