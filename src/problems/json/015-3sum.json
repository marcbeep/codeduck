{
  "id": 15,
  "title": "3Sum",
  "list": ["grind75"],
  "category": "Two Pointers",
  "difficulty": "Medium",
  "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.",
  "constraints": ["3 <= nums.length <= 3000", "-105 <= nums[i] <= 105"],
  "testCases": [
    {
      "input": {
        "nums": [-1, 0, 1, 2, -1, -4]
      },
      "output": [
        [-1, -1, 2],
        [-1, 0, 1]
      ],
      "explanation": "The triplets that sum to zero are [-1,-1,2] and [-1,0,1]. Notice that the order of the output and the order of the triplets does not matter."
    },
    {
      "input": {
        "nums": [0, 1, 1]
      },
      "output": [],
      "explanation": "The only possible triplet does not sum up to 0."
    },
    {
      "input": {
        "nums": [0, 0, 0]
      },
      "output": [[0, 0, 0]],
      "explanation": "The only possible triplet sums up to 0."
    }
  ],
  "solution": {
    "code": "def three_sum(nums: list[int]) -> list[list[int]]:\n    # Sort the array first\n    nums.sort()\n    result = []\n    \n    for i in range(len(nums) - 2):\n        # Skip duplicates for first element\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        \n        # Use two pointers for the remaining two elements\n        left, right = i + 1, len(nums) - 1\n        \n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            \n            if total == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                \n                # Skip duplicates for left and right\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                \n                left += 1\n                right -= 1\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return result",
    "explanation": "This solution uses sorting and two pointers with O(n²) time complexity:\n1. First, we sort the array to enable efficient duplicate skipping and two-pointer approach\n2. We iterate through each element as the first element of the triplet\n3. For each first element, we use two pointers (left and right) to find the remaining two elements\n4. We skip duplicates at each step to avoid duplicate triplets\n5. If the sum is 0, we add the triplet and move both pointers inward\n6. If sum < 0, we move left pointer right; if sum > 0, we move right pointer left\n\nThe time complexity is O(n²) as we have nested loops. The space complexity is O(1) if we don't count the output array.\n\nKey insights:\n- Sorting allows us to use two pointers efficiently\n- We can skip duplicates to avoid duplicate triplets\n- The two-pointer approach works because the array is sorted\n- We only need to check one direction for each first element due to symmetry"
  }
}
