{
  "id": 55,
  "title": "Jump Game",
  "list": ["neetcode150"],
  "category": "Greedy",
  "difficulty": "Medium",
  "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n\nReturn true if you can reach the last index, or false otherwise.",
  "constraints": ["1 <= nums.length <= 104", "0 <= nums[i] <= 105"],
  "testCases": [
    {
      "input": {
        "nums": [2, 3, 1, 1, 4]
      },
      "output": true,
      "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
    },
    {
      "input": {
        "nums": [3, 2, 1, 0, 4]
      },
      "output": false,
      "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
    },
    {
      "input": {
        "nums": [0]
      },
      "output": true,
      "explanation": "You are already at the last index."
    }
  ],
  "solution": {
    "code": "def canJump(nums: list[int]) -> bool:\n    max_reach = 0\n    \n    for i in range(len(nums)):\n        # If current position is beyond what we can reach\n        if i > max_reach:\n            return False\n        \n        # Update the maximum position we can reach\n        max_reach = max(max_reach, i + nums[i])\n        \n        # If we can reach the last index\n        if max_reach >= len(nums) - 1:\n            return True\n    \n    return True",
    "explanation": "This solution uses a greedy approach with O(n) time complexity:\n1. Keep track of the maximum position we can reach (max_reach)\n2. For each position, check if we can reach it (i <= max_reach)\n3. If we can't reach the current position, return False\n4. Update max_reach to include the jump from current position\n5. If max_reach >= last index, we can reach the end\n\nThe key insight is that we only need to track the maximum reachable position, not the specific path taken."
  }
}
