{
  "id": 286,
  "title": "Walls and Gates",
  "list": ["neetcode150"],
  "category": "Graphs",
  "difficulty": "Medium",
  "description": "You are given an m x n grid rooms initialized with these three possible values:\n- -1 A wall or an obstacle.\n- 0 A gate.\n- INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.\n\nFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.",
  "constraints": [
    "m == rooms.length",
    "n == rooms[i].length",
    "1 <= m, n <= 250",
    "rooms[i][j] is -1, 0, or 231 - 1"
  ],
  "testCases": [
    {
      "input": {
        "rooms": [
          [2147483647, -1, 0, 2147483647],
          [2147483647, 2147483647, 2147483647, -1],
          [2147483647, -1, 2147483647, -1],
          [0, -1, 2147483647, 2147483647]
        ]
      },
      "output": [
        [3, -1, 0, 1],
        [2, 2, 1, -1],
        [1, -1, 2, -1],
        [0, -1, 3, 4]
      ],
      "explanation": "The 2D grid is:\n3 -1  0  1\n2  2  1 -1\n1 -1  2 -1\n0 -1  3  4"
    },
    {
      "input": {
        "rooms": [[-1]]
      },
      "output": [[-1]],
      "explanation": "Only wall in the room."
    },
    {
      "input": {
        "rooms": [[2147483647]]
      },
      "output": [[2147483647]],
      "explanation": "No gate can be reached."
    }
  ],
  "solution": {
    "code": "from collections import deque\n\ndef wallsAndGates(rooms: list[list[int]]) -> None:\n    if not rooms or not rooms[0]:\n        return\n    \n    m, n = len(rooms), len(rooms[0])\n    queue = deque()\n    \n    # Find all gates and add them to queue\n    for i in range(m):\n        for j in range(n):\n            if rooms[i][j] == 0:\n                queue.append((i, j))\n    \n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    while queue:\n        i, j = queue.popleft()\n        \n        # Check all four directions\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            \n            # If neighbor is valid and empty room\n            if (0 <= ni < m and 0 <= nj < n and \n                rooms[ni][nj] == 2147483647):\n                \n                rooms[ni][nj] = rooms[i][j] + 1\n                queue.append((ni, nj))",
    "explanation": "This solution uses BFS with O(m*n) time complexity:\n1. We first find all gates (value 0) and add them to a queue\n2. We use BFS to explore from all gates simultaneously\n3. For each room, we check all four adjacent rooms\n4. If an adjacent room is empty (INF), we update its distance and add it to queue\n5. We continue until no more rooms can be reached\n\nThe time complexity is O(m*n) as we visit each room at most once. The space complexity is O(m*n) for the queue in the worst case.\n\nThe key insight is that this is a multi-source BFS problem where all gates start simultaneously, and we fill rooms with the minimum distance to any gate."
  }
}
