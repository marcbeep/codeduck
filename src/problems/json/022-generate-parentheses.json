{
  "id": 22,
  "title": "Generate Parentheses",
  "list": ["neetcode150"],
  "category": "Stack",
  "difficulty": "Medium",
  "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
  "constraints": ["1 <= n <= 8"],
  "testCases": [
    {
      "input": {
        "n": 3
      },
      "output": ["((()))", "(()())", "(())()", "()(())", "()()()"],
      "explanation": "All possible combinations of well-formed parentheses for n=3."
    },
    {
      "input": {
        "n": 1
      },
      "output": ["()"],
      "explanation": "Only one possible combination for n=1."
    },
    {
      "input": {
        "n": 2
      },
      "output": ["(())", "()()"],
      "explanation": "Two possible combinations for n=2."
    }
  ],
  "solution": {
    "code": "def generate_parenthesis(n: int) -> list[str]:\n    def backtrack(open_count: int, close_count: int, current: str):\n        # Base case: if we've used all parentheses\n        if open_count == n and close_count == n:\n            result.append(current)\n            return\n        \n        # Add opening parenthesis if we haven't used all\n        if open_count < n:\n            backtrack(open_count + 1, close_count, current + \"(\")\n        \n        # Add closing parenthesis if we have more open than close\n        if close_count < open_count:\n            backtrack(open_count, close_count + 1, current + \")\")\n    \n    result = []\n    backtrack(0, 0, \"\")\n    return result",
    "explanation": "This solution uses backtracking:\n1. Use recursive backtracking to generate all valid combinations\n2. Keep track of number of opening and closing parentheses used\n3. Add opening parenthesis if we haven't used all n\n4. Add closing parenthesis if we have more opening than closing parentheses\n5. Continue until we've used all n pairs of parentheses\n\nKey insight: We can only add a closing parenthesis if we have more opening than closing, ensuring we never create invalid combinations.\n\nTime complexity: O(4^n/âˆšn), Space complexity: O(n)"
  }
}
