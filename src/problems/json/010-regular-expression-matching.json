{
  "id": 10,
  "title": "Regular Expression Matching",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Hard",
  "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).",
  "constraints": [
    "1 <= s.length <= 20",
    "1 <= p.length <= 30",
    "s contains only lowercase English letters.",
    "p contains only lowercase English letters, '.', and '*'.",
    "It is guaranteed for each appearance of the character '*', there will be a previous valid character to repeat."
  ],
  "testCases": [
    {
      "input": {
        "s": "aa",
        "p": "a"
      },
      "output": false,
      "explanation": "'a' does not match the entire string 'aa'."
    },
    {
      "input": {
        "s": "aa",
        "p": "a*"
      },
      "output": true,
      "explanation": "'*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes 'aa'."
    },
    {
      "input": {
        "s": "ab",
        "p": ".*"
      },
      "output": true,
      "explanation": "'.*' means 'zero or more (*) of any character (.)'."
    }
  ],
  "solution": {
    "code": "def isMatch(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    # dp[i][j] = does s[0:i] match p[0:j]\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    \n    # Handle patterns like a*, a*b*, etc.\n    for j in range(1, n + 1):\n        if p[j-1] == '*':\n            dp[0][j] = dp[0][j-2]\n    \n    # Fill DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j-1] == '.' or p[j-1] == s[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            elif p[j-1] == '*':\n                dp[i][j] = dp[i][j-2]  # zero occurrence\n                if p[j-2] == '.' or p[j-2] == s[i-1]:\n                    dp[i][j] |= dp[i-1][j]  # one or more occurrence\n    \n    return dp[m][n]",
    "explanation": "This solution uses 2-D DP:\n1. dp[i][j] = does s[0:i] match p[0:j]\n2. Base case: dp[0][0] = True (empty strings match)\n3. For each position (i,j):\n   - If p[j-1] is '.' or matches s[i-1]: dp[i][j] = dp[i-1][j-1]\n   - If p[j-1] is '*': dp[i][j] = dp[i][j-2] (zero) or dp[i-1][j] (one+)\n4. Answer is dp[m][n]\n\nTime complexity: O(m*n), Space complexity: O(m*n)"
  }
}
