{
  "id": 11,
  "title": "Container With Most Water",
  "list": ["grind75"],
  "category": "Two Pointers",
  "difficulty": "Medium",
  "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n\nFind two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.",
  "constraints": [
    "n == height.length",
    "2 <= n <= 105",
    "0 <= height[i] <= 104"
  ],
  "testCases": [
    {
      "input": {
        "height": [1, 8, 6, 2, 5, 4, 8, 3, 7]
      },
      "output": 49,
      "explanation": "The maximum area is obtained by choosing height[1] = 8 and height[8] = 7, which gives us 8 * (8 - 1) = 49."
    },
    {
      "input": {
        "height": [1, 1]
      },
      "output": 1,
      "explanation": "The maximum area is obtained by choosing height[0] = 1 and height[1] = 1, which gives us 1 * (1 - 0) = 1."
    },
    {
      "input": {
        "height": [4, 3, 2, 1, 4]
      },
      "output": 16,
      "explanation": "The maximum area is obtained by choosing height[0] = 4 and height[4] = 4, which gives us 4 * (4 - 0) = 16."
    }
  ],
  "solution": {
    "code": "def maxArea(height: list[int]) -> int:\n    left, right = 0, len(height) - 1\n    max_area = 0\n    \n    while left < right:\n        # Calculate current area\n        width = right - left\n        h = min(height[left], height[right])\n        area = width * h\n        max_area = max(max_area, area)\n        \n        # Move the pointer with smaller height\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_area",
    "explanation": "This solution uses the two-pointer approach:\n1. We start with two pointers at the ends of the array\n2. We calculate the area between the two lines\n3. We move the pointer with the smaller height inward\n4. We continue until the pointers meet\n5. We keep track of the maximum area found\n\nKey insight: We can safely move the pointer with the smaller height because:\n- The width will decrease in the next iteration\n- The height is limited by the smaller of the two heights\n- So the area can only decrease if we keep the smaller height\n- Therefore, we should try to find a potentially larger height\n\nExample: height = [1, 8, 6, 2, 5, 4, 8, 3, 7]\n- Initial: left = 0 (height[0] = 1), right = 8 (height[8] = 7)\n- Area = min(1, 7) * (8 - 0) = 1 * 8 = 8\n- Move left pointer (smaller height): left = 1, right = 8\n- Area = min(8, 7) * (8 - 1) = 7 * 7 = 49\n- Continue until pointers meet...\n\nThe time complexity is O(n) as we only need one pass through the array. The space complexity is O(1) as we only use a constant amount of extra space."
  }
}
