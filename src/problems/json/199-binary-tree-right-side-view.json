{
  "id": 199,
  "title": "Binary Tree Right Side View",
  "list": ["grind75", "neetcode150"],
  "category": "Trees",
  "difficulty": "Medium",
  "description": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 100]",
    "-100 <= Node.val <= 100"
  ],
  "testCases": [
    {
      "input": {
        "root": [1, 2, 3, null, 5, null, 4]
      },
      "output": [1, 3, 4],
      "explanation": "When standing on the right side, you can see nodes 1, 3, and 4."
    },
    {
      "input": {
        "root": [1, null, 3]
      },
      "output": [1, 3],
      "explanation": "When standing on the right side, you can see nodes 1 and 3."
    },
    {
      "input": {
        "root": []
      },
      "output": [],
      "explanation": "Empty tree has no right side view."
    }
  ],
  "solution": {
    "code": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef rightSideView(root: TreeNode) -> list[int]:\n    if not root:\n        return []\n    \n    result = []\n    queue = deque([root])\n    \n    while queue:\n        level_size = len(queue)\n        \n        for i in range(level_size):\n            node = queue.popleft()\n            \n            # Add rightmost node of each level\n            if i == level_size - 1:\n                result.append(node.val)\n            \n            # Add children to queue\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n    \n    return result",
    "explanation": "This solution uses level-order traversal (BFS):\n- Use a queue to perform level-order traversal\n- For each level, add the rightmost node (last node) to result\n- Time complexity: O(n) where n is the number of nodes\n- Space complexity: O(w) where w is the maximum width of the tree"
  }
}
