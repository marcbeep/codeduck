{
  "id": 211,
  "title": "Design Add And Search Words Data Structure",
  "list": ["neetcode150"],
  "category": "Tries",
  "difficulty": "Medium",
  "description": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\n\nImplement the WordDictionary class:\n- WordDictionary() Initializes the object.\n- void addWord(word) Adds word to the data structure, it can be matched later.\n- bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.",
  "constraints": [
    "1 <= word.length <= 25",
    "word in addWord consists of lowercase English letters",
    "word in search consists of '.' or lowercase English letters",
    "There will be at most 104 calls in total to addWord and search"
  ],
  "testCases": [
    {
      "input": {
        "operations": [
          "WordDictionary",
          "addWord",
          "addWord",
          "addWord",
          "search",
          "search",
          "search",
          "search"
        ],
        "values": [
          [],
          ["bad"],
          ["dad"],
          ["mad"],
          ["pad"],
          ["bad"],
          [".ad"],
          ["b.."]
        ]
      },
      "output": [null, null, null, null, false, true, true, true],
      "explanation": "WordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True"
    },
    {
      "input": {
        "operations": ["WordDictionary", "addWord", "search"],
        "values": [[], ["a"], ["."]]
      },
      "output": [null, null, true],
      "explanation": "WordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"a\");\nwordDictionary.search(\".\"); // return True"
    }
  ],
  "solution": {
    "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n\nclass WordDictionary:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def addWord(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n    \n    def search(self, word: str) -> bool:\n        def dfs(j, root):\n            cur = root\n            \n            for i in range(j, len(word)):\n                c = word[i]\n                \n                if c == \".\":\n                    # Try all possible children\n                    for child in cur.children.values():\n                        if dfs(i + 1, child):\n                            return True\n                    return False\n                else:\n                    if c not in cur.children:\n                        return False\n                    cur = cur.children[c]\n            \n            return cur.is_end\n        \n        return dfs(0, self.root)",
    "explanation": "This solution uses a Trie with DFS for wildcard matching:\n- Use Trie to store words efficiently\n- For search with dots, use DFS to try all possible paths\n- When encountering a dot, try all children of current node\n- Time complexity: O(26^m) where m is the length of the word (worst case)\n- Space complexity: O(n) where n is the total number of characters in all words"
  }
}
