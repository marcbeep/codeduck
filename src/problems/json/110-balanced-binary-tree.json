{
  "id": 110,
  "title": "Balanced Binary Tree",
  "list": [
    "grind75"
  ],
  "category": "Tree",
  "difficulty": "Easy",
  "description": "Given a binary tree, determine if it is height-balanced.\n\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 5000]",
    "-104 <= Node.val <= 104"
  ],
  "testCases": [
    {
      "input": {
        "root": [
          3,
          9,
          20,
          null,
          null,
          15,
          7
        ]
      },
      "output": true,
      "explanation": "The tree is height-balanced. The left subtree has height 1 and the right subtree has height 2."
    },
    {
      "input": {
        "root": [
          1,
          2,
          2,
          3,
          3,
          null,
          null,
          4,
          4
        ]
      },
      "output": false,
      "explanation": "The tree is not height-balanced. The left subtree has height 3 and the right subtree has height 1."
    },
    {
      "input": {
        "root": []
      },
      "output": true,
      "explanation": "An empty tree is considered height-balanced."
    },
    {
      "input": {
        "root": [
          1,
          2,
          3,
          4,
          5,
          6,
          null,
          8
        ]
      },
      "output": true,
      "explanation": "The tree is height-balanced."
    }
  ],
  "solution": {
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef is_balanced(root):\n    def get_height(node):\n        if not node:\n            return 0\n        \n        left_height = get_height(node.left)\n        right_height = get_height(node.right)\n        \n        # If any subtree is unbalanced, return -1\n        if left_height == -1 or right_height == -1:\n            return -1\n        \n        # If height difference is more than 1, return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        # Return the height of current node\n        return max(left_height, right_height) + 1\n    \n    return get_height(root) != -1\n\n# Alternative approach with separate height calculation\ndef is_balanced_alternative(root):\n    def height(node):\n        if not node:\n            return 0\n        return max(height(node.left), height(node.right)) + 1\n    \n    def is_balanced_helper(node):\n        if not node:\n            return True\n        \n        # Check if current node is balanced\n        left_height = height(node.left)\n        right_height = height(node.right)\n        \n        if abs(left_height - right_height) > 1:\n            return False\n        \n        # Recursively check left and right subtrees\n        return is_balanced_helper(node.left) and is_balanced_helper(node.right)\n    \n    return is_balanced_helper(root)\n\n# More efficient approach using bottom-up DFS\ndef is_balanced_efficient(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        \n        left = check_balance(node.left)\n        if left == -1:\n            return -1\n        \n        right = check_balance(node.right)\n        if right == -1:\n            return -1\n        \n        if abs(left - right) > 1:\n            return -1\n        \n        return max(left, right) + 1\n    \n    return check_balance(root) != -1",
    "explanation": "Three approaches are shown:\n\n1. Optimized approach (recommended):\n   - Use a single DFS traversal that returns height or -1 if unbalanced\n   - If any subtree returns -1, propagate -1 up\n   - Check height difference at each node\n   - Time complexity: O(n) where n is the number of nodes\n   - Space complexity: O(h) where h is the height of the tree\n\n2. Alternative approach with separate height calculation:\n   - Calculate height separately for each node\n   - Check balance condition at each node\n   - Less efficient as it recalculates heights multiple times\n   - Time complexity: O(nÂ²) in worst case\n   - Space complexity: O(h)\n\n3. Bottom-up DFS approach:\n   - Similar to the first approach but with clearer structure\n   - Returns height if balanced, -1 if unbalanced\n   - Time complexity: O(n)\n   - Space complexity: O(h)\n\nThe first approach is the most efficient as it avoids redundant height calculations."
  }
}
