{
  "id": 105,
  "title": "Construct Binary Tree from Preorder and Inorder Traversal",
  "list": [
    "grind75"
  ],
  "category": "Tree",
  "difficulty": "Medium",
  "description": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
  "constraints": [
    "1 <= preorder.length <= 3000",
    "inorder.length == preorder.length",
    "-3000 <= preorder[i], inorder[i] <= 3000",
    "preorder and inorder consist of unique values",
    "Each value of inorder also appears in preorder",
    "inorder is guaranteed to be the inorder traversal of the tree"
  ],
  "testCases": [
    {
      "input": {
        "preorder": [
          3,
          9,
          20,
          15,
          7
        ],
        "inorder": [
          9,
          3,
          15,
          20,
          7
        ]
      },
      "output": [
        3,
        9,
        20,
        null,
        null,
        15,
        7
      ],
      "explanation": "The constructed binary tree is:\n    3\n   / \\\n  9  20\n     / \\\n    15  7"
    },
    {
      "input": {
        "preorder": [
          -1
        ],
        "inorder": [
          -1
        ]
      },
      "output": [
        -1
      ],
      "explanation": "Single node tree."
    },
    {
      "input": {
        "preorder": [
          1,
          2
        ],
        "inorder": [
          2,
          1
        ]
      },
      "output": [
        1,
        2
      ],
      "explanation": "Tree with root and left child."
    }
  ],
  "solution": {
    "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef buildTree(preorder: list[int], inorder: list[int]) -> TreeNode:\n    # Create a hash map for O(1) lookup of inorder indices\n    inorder_map = {val: idx for idx, val in enumerate(inorder)}\n    \n    def build(pre_start: int, pre_end: int, in_start: int, in_end: int) -> TreeNode:\n        if pre_start > pre_end:\n            return None\n        \n        # Root is the first element in preorder\n        root_val = preorder[pre_start]\n        root = TreeNode(root_val)\n        \n        # Find root position in inorder\n        root_idx = inorder_map[root_val]\n        \n        # Calculate sizes of left and right subtrees\n        left_size = root_idx - in_start\n        \n        # Recursively build left and right subtrees\n        root.left = build(pre_start + 1, pre_start + left_size, in_start, root_idx - 1)\n        root.right = build(pre_start + left_size + 1, pre_end, root_idx + 1, in_end)\n        \n        return root\n    \n    return build(0, len(preorder) - 1, 0, len(inorder) - 1)",
    "explanation": "This solution uses a recursive divide-and-conquer approach:\n1. We create a hash map to store the index of each value in the inorder array for O(1) lookup\n2. We use a recursive function that takes the current ranges for both preorder and inorder arrays\n3. The root is always the first element in the current preorder range\n4. We find the root's position in the inorder array\n5. We calculate the size of the left subtree\n6. We recursively build the left subtree using the appropriate ranges\n7. We recursively build the right subtree using the appropriate ranges\n8. We return the constructed root\n\nExample: preorder = [3, 9, 20, 15, 7], inorder = [9, 3, 15, 20, 7]\n- Root = 3 (first in preorder)\n- In inorder: left subtree = [9], right subtree = [15, 20, 7]\n- Left subtree: preorder = [9], inorder = [9]\n- Right subtree: preorder = [20, 15, 7], inorder = [15, 20, 7]\n- Continue recursively...\n\nThe time complexity is O(n) as we visit each node exactly once. The space complexity is O(n) for the hash map and recursion stack."
  }
}
