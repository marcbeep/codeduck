{
  "id": 543,
  "title": "Diameter of Binary Tree",
  "list": ["grind75", "neetcode150"],
  "category": "Trees",
  "difficulty": "Easy",
  "description": "Given the root of a binary tree, return the length of the diameter of the tree.\n\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\n\nThe length of path between two nodes is represented by the number of edges between them.",
  "constraints": [
    "The number of nodes in the tree is in the range [1, 104]",
    "-100 <= Node.val <= 100"
  ],
  "testCases": [
    {
      "input": {
        "root": [1, 2, 3, 4, 5]
      },
      "output": 3,
      "explanation": "3 is the length of the path [4,2,1,3] or [5,2,1,3]."
    },
    {
      "input": {
        "root": [1, 2]
      },
      "output": 1,
      "explanation": "1 is the length of the path [2,1]."
    },
    {
      "input": {
        "root": [1]
      },
      "output": 0,
      "explanation": "Single node has diameter 0."
    },
    {
      "input": {
        "root": [1, 2, 3, 4, 5, 6, 7]
      },
      "output": 4,
      "explanation": "The diameter is the path from node 4 to node 7 through the root."
    }
  ],
  "solution": {
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef diameter_of_binary_tree(root):\n    # Global variable to track the maximum diameter\n    max_diameter = 0\n    \n    def height(node):\n        nonlocal max_diameter\n        \n        # Base case: if node is None, height is 0\n        if not node:\n            return 0\n        \n        # Calculate height of left and right subtrees\n        left_height = height(node.left)\n        right_height = height(node.right)\n        \n        # Update maximum diameter\n        # Diameter through current node = left_height + right_height\n        max_diameter = max(max_diameter, left_height + right_height)\n        \n        # Return height of current node\n        return max(left_height, right_height) + 1\n    \n    # Start the height calculation\n    height(root)\n    \n    return max_diameter",
    "explanation": "This solution uses DFS with a global variable to track maximum diameter:\n- Calculate height of each node\n- Update diameter when processing each node (left_height + right_height)\n- Return height of current node for parent\n- Time complexity: O(n) where n is the number of nodes\n- Space complexity: O(h) where h is the height of the tree"
  }
}
