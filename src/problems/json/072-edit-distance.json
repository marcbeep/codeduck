{
  "id": 72,
  "title": "Edit Distance",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Hard",
  "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n\nYou have the following three operations permitted on a word:\n\nInsert a character\nDelete a character\nReplace a character",
  "constraints": [
    "0 <= word1.length, word2.length <= 500",
    "word1 and word2 consist of lowercase English letters."
  ],
  "testCases": [
    {
      "input": {
        "word1": "horse",
        "word2": "ros"
      },
      "output": 3,
      "explanation": "horse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')"
    },
    {
      "input": {
        "word1": "intention",
        "word2": "execution"
      },
      "output": 5,
      "explanation": "intention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')"
    },
    {
      "input": {
        "word1": "abc",
        "word2": "abc"
      },
      "output": 0,
      "explanation": "No operations needed, strings are already equal."
    }
  ],
  "solution": {
    "code": "def minDistance(word1: str, word2: str) -> int:\n    m, n = len(word1), len(word2)\n    # dp[i][j] = min operations to convert word1[0:i] to word2[0:j]\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Base cases\n    for i in range(m + 1):\n        dp[i][0] = i  # Delete i characters\n    for j in range(n + 1):\n        dp[0][j] = j  # Insert j characters\n    \n    # Fill DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if word1[i-1] == word2[j-1]:\n                # Characters match, no operation needed\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                # Take minimum of insert, delete, replace\n                dp[i][j] = 1 + min(dp[i][j-1],    # insert\n                                   dp[i-1][j],    # delete\n                                   dp[i-1][j-1])  # replace\n    \n    return dp[m][n]",
    "explanation": "This solution uses 2-D DP:\n1. dp[i][j] = min operations to convert word1[0:i] to word2[0:j]\n2. Base cases: dp[i][0] = i, dp[0][j] = j\n3. For each position (i,j):\n   - If characters match: dp[i][j] = dp[i-1][j-1]\n   - Else: dp[i][j] = 1 + min(insert, delete, replace)\n4. Answer is dp[m][n]\n\nTime complexity: O(m*n), Space complexity: O(m*n)"
  }
}
