{
  "id": 4,
  "title": "Median of Two Sorted Arrays",
  "list": ["neetcode150", "marc30"],
  "category": "Binary Search",
  "difficulty": "Hard",
  "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be O(log (m+n)).",
  "constraints": [
    "nums1.length == m",
    "nums2.length == n",
    "0 <= m <= 1000",
    "0 <= n <= 1000",
    "1 <= m + n <= 2000",
    "-106 <= nums1[i], nums2[i] <= 106"
  ],
  "testCases": [
    {
      "input": {
        "nums1": [1, 3],
        "nums2": [2]
      },
      "output": 2.0,
      "explanation": "merged array = [1,2,3] and median is 2."
    },
    {
      "input": {
        "nums1": [1, 2],
        "nums2": [3, 4]
      },
      "output": 2.5,
      "explanation": "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
    },
    {
      "input": {
        "nums1": [0, 0],
        "nums2": [0, 0]
      },
      "output": 0.0,
      "explanation": "merged array = [0,0,0,0] and median is 0."
    }
  ],
  "solution": {
    "code": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    # Ensure nums1 is the smaller array\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    m, n = len(nums1), len(nums2)\n    left, right = 0, m\n    \n    while left <= right:\n        # Partition nums1\n        partition_x = (left + right) // 2\n        # Partition nums2\n        partition_y = (m + n + 1) // 2 - partition_x\n        \n        # Find the four elements around the partition\n        max_left_x = float('-inf') if partition_x == 0 else nums1[partition_x - 1]\n        min_right_x = float('inf') if partition_x == m else nums1[partition_x]\n        \n        max_left_y = float('-inf') if partition_y == 0 else nums2[partition_y - 1]\n        min_right_y = float('inf') if partition_y == n else nums2[partition_y]\n        \n        # Check if partition is correct\n        if max_left_x <= min_right_y and max_left_y <= min_right_x:\n            # Partition is correct, find median\n            if (m + n) % 2 == 0:\n                # Even length: average of two middle elements\n                return (max(max_left_x, max_left_y) + min(min_right_x, min_right_y)) / 2\n            else:\n                # Odd length: max of left partition\n                return max(max_left_x, max_left_y)\n        elif max_left_x > min_right_y:\n            # Move partition_x left\n            right = partition_x - 1\n        else:\n            # Move partition_x right\n            left = partition_x + 1\n    \n    # This should never be reached\n    return 0.0",
    "explanation": "Binary search on partition:\n- Partition both arrays so left half â‰¤ right half\n- Binary search on smaller array to find correct partition\n- Compare boundary elements to check partition correctness\n- Calculate median based on total length (odd/even)\n- Time: O(log(min(m,n))), Space: O(1)"
  }
}
