{
  "id": 647,
  "title": "Palindromic Substrings",
  "list": ["neetcode150"],
  "category": "1-D DP",
  "difficulty": "Medium",
  "description": "Given a string s, return the number of palindromic substrings in it.\n\nA string is a palindrome when it reads the same backward as forward.\n\nA substring is a contiguous sequence of characters within the string.",
  "constraints": [
    "1 <= s.length <= 1000",
    "s consists of lowercase English letters"
  ],
  "testCases": [
    {
      "input": {
        "s": "abc"
      },
      "output": 3,
      "explanation": "Three palindromic strings: \"a\", \"b\", \"c\"."
    },
    {
      "input": {
        "s": "aaa"
      },
      "output": 6,
      "explanation": "Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."
    }
  ],
  "solution": {
    "code": "def countSubstrings(s: str) -> int:\n    n = len(s)\n    count = 0\n    \n    # Check each position as center of palindrome\n    for i in range(n):\n        # Odd length palindromes (single character center)\n        left, right = i, i\n        while left >= 0 and right < n and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        \n        # Even length palindromes (two character center)\n        left, right = i, i + 1\n        while left >= 0 and right < n and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n    \n    return count",
    "explanation": "This solution uses the expand around center approach:\n1. For each position in the string, we treat it as a potential center of a palindrome\n2. We expand outward from the center while characters match\n3. We check both odd-length palindromes (single character center) and even-length palindromes (two character center)\n4. We count each valid palindrome we find\n5. We return the total count\n\nThe time complexity is O(n²) as we check each position as a center and expand. The space complexity is O(1) as we only use a constant amount of extra space.\n\nKey insight: Instead of checking all possible substrings (which would be O(n³)), we use the fact that every palindrome has a center and expand from there."
  }
}
