{
  "id": 21,
  "title": "Merge Two Sorted Lists",
  "list": ["grind75"],
  "category": "Linked List",
  "topics": ["Linked List", "Recursion"],
  "difficulty": "Easy",
  "description": "You are given the heads of two sorted linked lists list1 and list2.\n\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.",
  "constraints": [
    "The number of nodes in both lists is in the range [0, 50]",
    "-100 <= Node.val <= 100",
    "Both list1 and list2 are sorted in non-decreasing order"
  ],
  "testCases": [
    {
      "input": {
        "list1": [1, 2, 4],
        "list2": [1, 3, 4]
      },
      "output": [1, 1, 2, 3, 4, 4],
      "explanation": "We merge the lists by comparing nodes and linking them in sorted order."
    },
    {
      "input": {
        "list1": [],
        "list2": []
      },
      "output": [],
      "explanation": "Both lists are empty, so the merged list is also empty."
    },
    {
      "input": {
        "list1": [],
        "list2": [0]
      },
      "output": [0],
      "explanation": "One list is empty, so we return the non-empty list."
    }
  ],
  "solution": {
    "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        # Create a dummy node to handle edge cases\n        dummy = ListNode()\n        current = dummy\n        \n        # Compare and merge while both lists have nodes\n        while list1 and list2:\n            if list1.val <= list2.val:\n                current.next = list1\n                list1 = list1.next\n            else:\n                current.next = list2\n                list2 = list2.next\n            current = current.next\n        \n        # Attach remaining nodes from either list\n        current.next = list1 if list1 else list2\n        \n        return dummy.next",
    "explanation": "This solution uses a dummy node approach to merge the lists:\n1. We create a dummy node to handle edge cases and maintain a current pointer\n2. While both lists have nodes:\n   - Compare the values of current nodes from both lists\n   - Link the smaller node to our merged list\n   - Move the pointer in the list we took the node from\n3. After one list is exhausted, attach the remaining nodes from the other list\n4. Return the merged list starting from dummy.next\n\nThe time complexity is O(n + m) where n and m are the lengths of the input lists, as we process each node exactly once. The space complexity is O(1) as we only use a constant amount of extra space regardless of input size."
  }
}
