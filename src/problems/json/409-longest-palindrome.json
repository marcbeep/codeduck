{
  "id": 409,
  "title": "Longest Palindrome",
  "list": ["grind75"],
  "category": "Arrays & Hashing",
  "difficulty": "Easy",
  "description": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\n\nLetters are case sensitive, for example, \"Aa\" is not considered a palindrome here.",
  "constraints": [
    "1 <= s.length <= 2000",
    "s consists of lowercase and/or uppercase English letters only"
  ],
  "testCases": [
    {
      "input": {
        "s": "abccccdd"
      },
      "output": 7,
      "explanation": "One longest palindrome that can be built is \"dccaccd\", whose length is 7."
    },
    {
      "input": {
        "s": "a"
      },
      "output": 1,
      "explanation": "The longest palindrome that can be built is \"a\", whose length is 1."
    },
    {
      "input": {
        "s": "bb"
      },
      "output": 2,
      "explanation": "The longest palindrome that can be built is \"bb\", whose length is 2."
    },
    {
      "input": {
        "s": "ccc"
      },
      "output": 3,
      "explanation": "The longest palindrome that can be built is \"ccc\", whose length is 3."
    }
  ],
  "solution": {
    "code": "def longest_palindrome(s: str) -> int:\n    # Count frequency of each character\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    length = 0\n    has_odd = False\n    \n    # For each character count\n    for count in char_count.values():\n        # Add even pairs to length\n        length += (count // 2) * 2\n        \n        # Check if we have any odd counts\n        if count % 2 == 1:\n            has_odd = True\n    \n    # Add 1 for the center character if we have any odd counts\n    if has_odd:\n        length += 1\n    \n    return length",
    "explanation": "Count frequency of each character. For each character, add even pairs to length. If any character has odd count, add 1 for center. Time: O(n). Space: O(k) where k is number of unique characters."
  }
}
