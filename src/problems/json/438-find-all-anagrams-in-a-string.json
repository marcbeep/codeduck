{
  "id": 438,
  "title": "Find All Anagrams in a String",
  "list": ["grind75"],
  "category": "Sliding Window",
  "difficulty": "Medium",
  "description": "Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
  "constraints": [
    "1 <= s.length, p.length <= 3 * 104",
    "s and p consist of lowercase English letters"
  ],
  "testCases": [
    {
      "input": {
        "s": "cbaebabacd",
        "p": "abc"
      },
      "output": [0, 6],
      "explanation": "The substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\"."
    },
    {
      "input": {
        "s": "abab",
        "p": "ab"
      },
      "output": [0, 1, 2],
      "explanation": "The substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\"."
    },
    {
      "input": {
        "s": "aa",
        "p": "bb"
      },
      "output": [],
      "explanation": "No anagrams of \"bb\" exist in \"aa\"."
    }
  ],
  "solution": {
    "code": "from collections import Counter\n\ndef findAnagrams(s: str, p: str) -> list[int]:\n    if len(s) < len(p):\n        return []\n    \n    # Count characters in pattern p\n    p_count = Counter(p)\n    # Count characters in current window\n    window_count = Counter()\n    \n    result = []\n    left = 0\n    \n    for right in range(len(s)):\n        # Add current character to window\n        window_count[s[right]] += 1\n        \n        # If window size equals pattern length\n        if right - left + 1 == len(p):\n            # Check if current window is an anagram\n            if window_count == p_count:\n                result.append(left)\n            \n            # Remove leftmost character from window\n            window_count[s[left]] -= 1\n            if window_count[s[left]] == 0:\n                del window_count[s[left]]\n            left += 1\n    \n    return result",
    "explanation": "This solution uses the sliding window technique with character counting:\n1. We create a counter for the pattern p to know how many of each character we need\n2. We maintain a sliding window counter for the current substring in s\n3. We expand the window by adding characters from the right\n4. When the window size equals the pattern length, we check if it's an anagram\n5. We shrink the window by removing characters from the left\n6. We continue until we've processed the entire string s\n\nExample: s = \"cbaebabacd\", p = \"abc\"\n- p_count = {'a': 1, 'b': 1, 'c': 1}\n- Window [0,2]: \"cba\" → window_count = {'c': 1, 'b': 1, 'a': 1} → match! → result = [0]\n- Window [1,3]: \"bae\" → window_count = {'b': 1, 'a': 1, 'e': 1} → no match\n- Window [2,4]: \"aeb\" → window_count = {'a': 1, 'e': 1, 'b': 1} → no match\n- Continue...\n- Window [6,8]: \"bac\" → window_count = {'b': 1, 'a': 1, 'c': 1} → match! → result = [0, 6]\n\nThe time complexity is O(n) where n is the length of string s. The space complexity is O(k) where k is the number of unique characters in the pattern."
  }
}
