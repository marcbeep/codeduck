{
  "id": 74,
  "title": "Search a 2D Matrix",
  "list": ["neetcode150"],
  "category": "Binary Search",
  "difficulty": "Medium",
  "description": "You are given an m x n integer matrix matrix with the following two properties:\n\n- Each row is sorted in non-decreasing order.\n- The first integer of each row is greater than the last integer of the previous row.\n\nGiven an integer target, return true if target is in matrix or false otherwise.\n\nYou must write a solution in O(log(m * n)) time complexity.",
  "constraints": [
    "m == matrix.length",
    "n == matrix[i].length",
    "1 <= m, n <= 100",
    "-104 <= matrix[i][j], target <= 104"
  ],
  "testCases": [
    {
      "input": {
        "matrix": [
          [1, 3, 5, 7],
          [10, 11, 16, 20],
          [23, 30, 34, 60]
        ],
        "target": 3
      },
      "output": true,
      "explanation": "Target 3 is found in the first row at index 1."
    },
    {
      "input": {
        "matrix": [
          [1, 3, 5, 7],
          [10, 11, 16, 20],
          [23, 30, 34, 60]
        ],
        "target": 13
      },
      "output": false,
      "explanation": "Target 13 is not found in the matrix."
    },
    {
      "input": {
        "matrix": [[1]],
        "target": 1
      },
      "output": true,
      "explanation": "Target 1 is found in the single element matrix."
    }
  ],
  "solution": {
    "code": "def search_matrix(matrix: list[list[int]], target: int) -> bool:\n    if not matrix or not matrix[0]:\n        return False\n    \n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        # Convert 1D index to 2D coordinates\n        row, col = mid // n, mid % n\n        \n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False",
    "explanation": "Treat 2D matrix as 1D sorted array:\n- Binary search on flattened indices (0 to m*n-1)\n- Convert 1D index to 2D: row = index // n, col = index % n\n- Standard binary search comparison\n- Time: O(log(m*n)), Space: O(1)"
  }
}
