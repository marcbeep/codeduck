{
  "id": 131,
  "title": "Palindrome Partitioning",
  "list": ["neetcode150"],
  "category": "Backtracking",
  "difficulty": "Medium",
  "description": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.",
  "constraints": [
    "1 <= s.length <= 16",
    "s contains only lowercase English letters"
  ],
  "testCases": [
    {
      "input": {
        "s": "aab"
      },
      "output": [
        ["a", "a", "b"],
        ["aa", "b"]
      ],
      "explanation": "Two possible partitions: [\"a\",\"a\",\"b\"] and [\"aa\",\"b\"]."
    },
    {
      "input": {
        "s": "a"
      },
      "output": [["a"]],
      "explanation": "Single character is always a palindrome."
    },
    {
      "input": {
        "s": "ab"
      },
      "output": [["a", "b"]],
      "explanation": "Only one partition possible since 'ab' is not a palindrome."
    }
  ],
  "solution": {
    "code": "def partition(s: str) -> list[list[str]]:\n    def is_palindrome(left: int, right: int) -> bool:\n        while left < right:\n            if s[left] != s[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def backtrack(start: int, current: list[str]):\n        # If we've processed the entire string, add current partition\n        if start == len(s):\n            result.append(current[:])\n            return\n        \n        # Try all possible end positions for current substring\n        for end in range(start, len(s)):\n            # Check if substring from start to end is palindrome\n            if is_palindrome(start, end):\n                current.append(s[start:end+1])\n                backtrack(end + 1, current)\n                current.pop()  # Backtrack\n    \n    result = []\n    backtrack(0, [])\n    return result",
    "explanation": "This solution uses backtracking to find all palindrome partitions:\n1. Use a recursive function that takes a start index and current partition\n2. At each step, try all possible end positions for the current substring\n3. Check if the substring from start to end is a palindrome\n4. If it is, add it to current partition and recurse\n5. Backtrack by removing the last added substring\n6. When reaching the end of string, add current partition to result\n\nThe time complexity is O(n * 2^n) where n is the string length. The space complexity is O(n) for the recursion stack."
  }
}
