{
  "id": 424,
  "title": "Longest Repeating Character Replacement",
  "list": ["neetcode150"],
  "category": "Sliding Window",
  "difficulty": "Medium",
  "description": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\n\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.",
  "constraints": [
    "1 <= s.length <= 105",
    "s consists of only uppercase English letters",
    "0 <= k <= s.length"
  ],
  "testCases": [
    {
      "input": {
        "s": "ABAB",
        "k": 1
      },
      "output": 3,
      "explanation": "Replace the one 'A' in the middle with 'B' and form \"AABBBBA\". The substring \"BBB\" has length 3."
    },
    {
      "input": {
        "s": "AABABBA",
        "k": 1
      },
      "output": 4,
      "explanation": "Replace the one 'A' in the middle with 'B' and form \"AABBBBA\". The substring \"BBBB\" has length 4."
    },
    {
      "input": {
        "s": "AAAA",
        "k": 2
      },
      "output": 4,
      "explanation": "No changes needed, the string is already all 'A's."
    }
  ],
  "solution": {
    "code": "def character_replacement(s: str, k: int) -> int:\n    from collections import defaultdict\n    \n    char_count = defaultdict(int)\n    left = 0\n    max_length = 0\n    max_freq = 0\n    \n    for right in range(len(s)):\n        # Add current character to window\n        char_count[s[right]] += 1\n        max_freq = max(max_freq, char_count[s[right]])\n        \n        # Check if current window is valid\n        # Window size - max frequency <= k means we can replace other chars\n        while (right - left + 1) - max_freq > k:\n            # Remove leftmost character\n            char_count[s[left]] -= 1\n            left += 1\n        \n        # Update max length\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length",
    "explanation": "This solution uses the sliding window technique with O(n) time complexity:\n1. We use a hash map to count the frequency of each character in the current window\n2. We maintain a sliding window and track the maximum frequency of any character\n3. For each character, we add it to the window and update the max frequency\n4. We check if the current window is valid: window_size - max_freq <= k\n5. If not valid, we shrink the window from the left\n6. We update the maximum length of valid windows found\n\nKey insights:\n- The longest substring will have the most frequent character repeated\n- We can replace at most k characters to make them the same as the most frequent character\n- The window is valid if (window_size - max_frequency) <= k\n- We don't need to update max_freq when shrinking because we only care about the maximum possible length\n\nExample: s = \"AABABBA\", k = 1\n- Window [0,0]: \"A\" → max_freq = 1, valid (1-1=0 <= 1)\n- Window [0,1]: \"AA\" → max_freq = 2, valid (2-2=0 <= 1)\n- Window [0,2]: \"AAB\" → max_freq = 2, valid (3-2=1 <= 1)\n- Window [0,3]: \"AABA\" → max_freq = 3, valid (4-3=1 <= 1)\n- Window [0,4]: \"AABAB\" → max_freq = 3, invalid (5-3=2 > 1)\n- Shrink: Window [1,4]: \"ABAB\" → max_freq = 2, valid (4-2=2 > 1)\n- Continue...\n- Result: max_length = 4\n\nThe time complexity is O(n) as each character is visited at most twice. The space complexity is O(1) as we only store character counts (bounded by alphabet size)."
  }
}
