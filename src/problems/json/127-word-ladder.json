{
  "id": 127,
  "title": "Word Ladder",
  "list": ["grind75", "neetcode150"],
  "category": "Graphs",
  "difficulty": "Hard",
  "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",
  "constraints": [
    "1 <= beginWord.length <= 10",
    "endWord.length == beginWord.length",
    "1 <= wordList.length <= 5000",
    "wordList[i].length == beginWord.length",
    "beginWord, endWord, and wordList[i] consist of lowercase English letters",
    "beginWord != endWord",
    "All the strings in wordList are unique"
  ],
  "testCases": [
    {
      "input": {
        "beginWord": "hit",
        "endWord": "cog",
        "wordList": ["hot", "dot", "dog", "lot", "log", "cog"]
      },
      "output": 5,
      "explanation": "One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", which is 5 words long."
    },
    {
      "input": {
        "beginWord": "hit",
        "endWord": "cog",
        "wordList": ["hot", "dot", "dog", "lot", "log"]
      },
      "output": 0,
      "explanation": "The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
    },
    {
      "input": {
        "beginWord": "hit",
        "endWord": "hit",
        "wordList": ["hot"]
      },
      "output": 1,
      "explanation": "The shortest transformation sequence is \"hit\" -> \"hit\", which is 1 word long."
    }
  ],
  "solution": {
    "code": "from collections import deque, defaultdict\n\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n    if endWord not in wordList:\n        return 0\n    \n    # Convert wordList to set for O(1) lookup\n    word_set = set(wordList)\n    \n    # BFS queue: (word, level)\n    queue = deque([(beginWord, 1)])\n    visited = {beginWord}\n    \n    while queue:\n        word, level = queue.popleft()\n        \n        if word == endWord:\n            return level\n        \n        # Try changing each character\n        for i in range(len(word)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                new_word = word[:i] + c + word[i+1:]\n                \n                if new_word in word_set and new_word not in visited:\n                    visited.add(new_word)\n                    queue.append((new_word, level + 1))\n    \n    return 0",
    "explanation": "This solution uses BFS to find the shortest transformation sequence:\n1. We first check if endWord is in wordList (if not, return 0)\n2. We convert wordList to a set for O(1) lookup\n3. We use BFS with a queue to explore all possible transformations\n4. For each word, we try changing each character to every letter in the alphabet\n5. If the new word is in wordList and not visited, we add it to the queue\n6. We continue until we find endWord or exhaust all possibilities\n\nKey insight: BFS guarantees that we find the shortest path to endWord.\n\nExample: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"]\n- Level 1: \"hit\" → try \"*it\", \"h*t\", \"hi*\"\n- Level 2: \"hot\" → try \"*ot\", \"h*t\", \"ho*\"\n- Level 3: \"dot\", \"lot\" → try \"*ot\", \"d*t\", \"do*\", etc.\n- Level 4: \"dog\", \"log\" → try \"*og\", \"d*g\", \"do*\", etc.\n- Level 5: \"cog\" → found! Return 5\n\nThe time complexity is O(26 * n * L) where n is the number of words and L is the length of each word. The space complexity is O(n) for the queue and visited set."
  }
}
