{
  "id": 104,
  "title": "Maximum Depth of Binary Tree",
  "list": ["grind75", "neetcode150", "marc30"],
  "category": "Trees",
  "difficulty": "Easy",
  "description": "Given the root of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 104]",
    "-100 <= Node.val <= 100"
  ],
  "testCases": [
    {
      "input": {
        "root": [3, 9, 20, null, null, 15, 7]
      },
      "output": 3,
      "explanation": "The maximum depth is 3: root (3) -> left child (9) -> left child (null), or root (3) -> right child (20) -> left child (15)."
    },
    {
      "input": {
        "root": [1, null, 2]
      },
      "output": 2,
      "explanation": "The maximum depth is 2: root (1) -> right child (2)."
    },
    {
      "input": {
        "root": []
      },
      "output": 0,
      "explanation": "An empty tree has depth 0."
    },
    {
      "input": {
        "root": [1]
      },
      "output": 1,
      "explanation": "A single node tree has depth 1."
    }
  ],
  "solution": {
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef max_depth(root):\n    # Recursive approach (DFS)\n    if not root:\n        return 0\n    \n    # Recursively find depth of left and right subtrees\n    left_depth = max_depth(root.left)\n    right_depth = max_depth(root.right)\n    \n    # Return the maximum depth plus 1 for current node\n    return max(left_depth, right_depth) + 1",
    "explanation": "This solution uses recursive DFS:\n- Base case: if root is None, return 0\n- Recursively find depth of left and right subtrees\n- Return maximum of left and right depths plus 1\n- Time complexity: O(n) where n is the number of nodes\n- Space complexity: O(h) where h is the height of the tree"
  }
}
