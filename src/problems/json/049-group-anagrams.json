{
  "id": 49,
  "title": "Group Anagrams",
  "list": ["neetcode150"],
  "category": "Arrays & Hashing",
  "difficulty": "Medium",
  "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
  "constraints": [
    "1 <= strs.length <= 104",
    "0 <= strs[i].length <= 100",
    "strs[i] consists of lowercase English letters"
  ],
  "testCases": [
    {
      "input": {
        "strs": ["eat", "tea", "tan", "ate", "nat", "bat"]
      },
      "output": [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]],
      "explanation": "Group anagrams together: 'eat', 'tea', 'ate' are anagrams; 'tan', 'nat' are anagrams; 'bat' is alone."
    },
    {
      "input": {
        "strs": [""]
      },
      "output": [[""]],
      "explanation": "Single empty string."
    },
    {
      "input": {
        "strs": ["a"]
      },
      "output": [["a"]],
      "explanation": "Single character string."
    }
  ],
  "solution": {
    "code": "def group_anagrams(strs: list[str]) -> list[list[str]]:\n    # Use a dictionary to group anagrams\n    anagram_groups = {}\n    \n    for s in strs:\n        # Sort the string to create a key for anagrams\n        sorted_s = ''.join(sorted(s))\n        \n        # Add to the appropriate group\n        if sorted_s in anagram_groups:\n            anagram_groups[sorted_s].append(s)\n        else:\n            anagram_groups[sorted_s] = [s]\n    \n    # Return all groups\n    return list(anagram_groups.values())",
    "explanation": "Sort each string to create a key for anagrams. Group strings with the same sorted key together. Time: O(n * k log k) where n is number of strings, k is max string length. Space: O(n * k)."
  }
}
