{
  "id": 150,
  "title": "Evaluate Reverse Polish Notation",
  "list": ["grind75"],
  "category": "Stack",
  "topics": ["Stack", "Array", "Math"],
  "difficulty": "Medium",
  "description": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n\nEvaluate the expression. Return an integer that represents the value of the expression.\n\nNote that:\n- The valid operators are '+', '-', '*', and '/'.\n- Each operand may be an integer or another expression.\n- The division between two integers always truncates toward zero.\n- There will not be any division by zero operation.\n- The input represents a valid arithmetic expression in a reverse polish notation.\n- The answer and all the intermediate calculations can be represented in a 32-bit integer.",
  "constraints": [
    "1 <= tokens.length <= 104",
    "tokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200]"
  ],
  "testCases": [
    {
      "input": {
        "tokens": ["2", "1", "+", "3", "*"]
      },
      "output": 9,
      "explanation": "((2 + 1) * 3) = 9"
    },
    {
      "input": {
        "tokens": ["4", "13", "5", "/", "+"]
      },
      "output": 6,
      "explanation": "(4 + (13 / 5)) = 6"
    },
    {
      "input": {
        "tokens": [
          "10",
          "6",
          "9",
          "3",
          "+",
          "-11",
          "*",
          "/",
          "*",
          "17",
          "+",
          "5",
          "+"
        ]
      },
      "output": 22,
      "explanation": "((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = 22"
    }
  ],
  "solution": {
    "code": "def eval_rpn(tokens: list[str]) -> int:\n    stack = []\n    \n    for token in tokens:\n        if token in \"+-*/\":\n            # Pop two operands\n            b = stack.pop()\n            a = stack.pop()\n            \n            # Perform operation\n            if token == \"+\":\n                stack.append(a + b)\n            elif token == \"-\":\n                stack.append(a - b)\n            elif token == \"*\":\n                stack.append(a * b)\n            elif token == \"/\":\n                # Truncate toward zero\n                stack.append(int(a / b))\n        else:\n            # Push operand onto stack\n            stack.append(int(token))\n    \n    return stack[0]",
    "explanation": "This solution uses a stack with O(n) time complexity:\n1. We use a stack to keep track of operands\n2. For each token, if it's an operator, we pop two operands from the stack\n3. We perform the operation and push the result back onto the stack\n4. If it's an operand, we push it onto the stack\n5. At the end, the stack contains the final result\n\nThe time complexity is O(n) as we process each token once. The space complexity is O(n) for the stack.\n\nKey insights:\n- Reverse Polish Notation is perfect for stack-based evaluation\n- Operators always come after their operands\n- We pop operands in reverse order (second operand first)\n- Division truncates toward zero (use int() instead of //)\n- The stack naturally handles the order of operations\n\nNote: The order of popping operands matters for non-commutative operations like subtraction and division."
  }
}
