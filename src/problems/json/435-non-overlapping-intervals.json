{
  "id": 435,
  "title": "Non-overlapping Intervals",
  "list": ["neetcode150"],
  "category": "Intervals",
  "difficulty": "Medium",
  "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
  "constraints": [
    "1 <= intervals.length <= 105",
    "intervals[i].length == 2",
    "-5 * 104 <= starti < endi <= 5 * 104"
  ],
  "testCases": [
    {
      "input": {
        "intervals": [
          [1, 2],
          [2, 3],
          [3, 4],
          [1, 3]
        ]
      },
      "output": 1,
      "explanation": "Remove [1, 3] to make the rest non-overlapping."
    },
    {
      "input": {
        "intervals": [
          [1, 2],
          [1, 2],
          [1, 2]
        ]
      },
      "output": 2,
      "explanation": "Remove two [1, 2] intervals to make the rest non-overlapping."
    },
    {
      "input": {
        "intervals": [
          [1, 2],
          [2, 3]
        ]
      },
      "output": 0,
      "explanation": "No intervals need to be removed as they are already non-overlapping."
    }
  ],
  "solution": {
    "code": "def eraseOverlapIntervals(intervals: list[list[int]]) -> int:\n    # Sort intervals by end time\n    intervals.sort(key=lambda x: x[1])\n    \n    count = 0\n    end = float('-inf')\n    \n    for interval in intervals:\n        # If current interval starts after or at the end of previous\n        if interval[0] >= end:\n            end = interval[1]\n        else:\n            # Overlap found, increment count\n            count += 1\n    \n    return count",
    "explanation": "This solution uses a greedy approach with O(n log n) time complexity:\n1. Sort intervals by end time (ascending)\n2. Keep track of the end time of the last selected interval\n3. For each interval, if it starts after or at the end of the previous, keep it\n4. Otherwise, count it as an interval to remove\n\nThe key insight is that sorting by end time allows us to maximize the number of non-overlapping intervals we can keep, which minimizes the number we need to remove."
  }
}
