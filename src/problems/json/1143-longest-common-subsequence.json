{
  "id": 1143,
  "title": "Longest Common Subsequence",
  "list": ["neetcode150"],
  "category": "2-D DP",
  "difficulty": "Medium",
  "description": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\n\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".\nA common subsequence of two strings is a subsequence that is common to both strings.",
  "constraints": [
    "1 <= text1.length, text2.length <= 1000",
    "text1 and text2 consist of only lowercase English characters."
  ],
  "testCases": [
    {
      "input": {
        "text1": "abcde",
        "text2": "ace"
      },
      "output": 3,
      "explanation": "The longest common subsequence is \"ace\" with a length of 3."
    },
    {
      "input": {
        "text1": "abc",
        "text2": "abc"
      },
      "output": 3,
      "explanation": "The longest common subsequence is \"abc\" with a length of 3."
    },
    {
      "input": {
        "text1": "abc",
        "text2": "def"
      },
      "output": 0,
      "explanation": "There is no common subsequence, so the result is 0."
    }
  ],
  "solution": {
    "code": "def longestCommonSubsequence(text1: str, text2: str) -> int:\n    m, n = len(text1), len(text2)\n    # Create 2D DP array with extra row/column for base cases\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill DP array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i-1] == text2[j-1]:\n                # Characters match, add 1 to previous LCS\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                # Characters don't match, take max of two options\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "explanation": "This solution uses 2-D dynamic programming:\n1. Create a DP array where dp[i][j] represents LCS of text1[0:i] and text2[0:j]\n2. Base case: dp[0][j] = dp[i][0] = 0 (empty string has LCS 0)\n3. For each position (i,j):\n   - If characters match: dp[i][j] = dp[i-1][j-1] + 1\n   - If characters don't match: dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n4. The answer is dp[m][n]\n\nTime complexity: O(m*n), Space complexity: O(m*n)"
  }
}
