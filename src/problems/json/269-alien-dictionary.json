{
  "id": 269,
  "title": "Alien Dictionary",
  "list": ["neetcode150"],
  "category": "Advanced Graphs",
  "difficulty": "Hard",
  "description": "There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.\n\nYou are given a list of strings words from the alien dictionary's sorted order. If it is not possible to determine the order of the alphabet, return \"\". If there are multiple valid solutions, return any of them.\n\nA string s is lexicographically smaller than a string t if at the first letter where s and t differ, the letter in s comes before the letter in the alphabet of t. If the first min(s.length, t.length) letters are the same, then s is smaller if and only if s.length < t.length.",
  "constraints": [
    "1 <= words.length <= 100",
    "1 <= words[i].length <= 100",
    "words[i] consists of only lowercase English letters."
  ],
  "testCases": [
    {
      "input": {
        "words": ["wrt", "wrf", "er", "ett", "rftt"]
      },
      "output": "wertf",
      "explanation": "From \"wrt\" and \"wrf\", we get 't' < 'f'. From \"wrt\" and \"er\", we get 'w' < 'e'. From \"er\" and \"ett\", we get 'r' < 't'. From \"ett\" and \"rftt\", we get 'e' < 'r'. So the answer is \"wertf\"."
    },
    {
      "input": {
        "words": ["z", "x"]
      },
      "output": "zx",
      "explanation": "From \"z\" and \"x\", we get 'z' < 'x'. So the answer is \"zx\"."
    },
    {
      "input": {
        "words": ["z", "x", "z"]
      },
      "output": "",
      "explanation": "The order is invalid, so return \"\"."
    }
  ],
  "solution": {
    "code": "from collections import defaultdict, deque\n\ndef alienOrder(words: list[str]) -> str:\n # Build adjacency list and in-degree count\n graph = defaultdict(set)\n in_degree = defaultdict(int)\n \n # Initialize all characters\n for word in words:\n for char in word:\n in_degree[char] = 0\n \n # Build graph from adjacent words\n for i in range(len(words) - 1):\n word1, word2 = words[i], words[i + 1]\n \n # Find first different character\n for j in range(min(len(word1), len(word2))):\n if word1[j] != word2[j]:\n if word2[j] not in graph[word1[j]]:\n graph[word1[j]].add(word2[j])\n in_degree[word2[j]] += 1\n break\n else:\n # Check for invalid case: shorter word comes after longer word\n if len(word1) > len(word2):\n return \"\"\n \n # Topological sort using Kahn's algorithm\n queue = deque([char for char in in_degree if in_degree[char] == 0])\n result = []\n \n while queue:\n char = queue.popleft()\n result.append(char)\n \n for neighbor in graph[char]:\n in_degree[neighbor] -= 1\n if in_degree[neighbor] == 0:\n queue.append(neighbor)\n \n # Check if we have a valid topological order\n if len(result) != len(in_degree):\n return \"\"\n \n return \"\".join(result)",
    "explanation": "This solution uses topological sort to determine the alien alphabet order:\n1. Build a directed graph from adjacent words by comparing characters\n2. Track in-degrees for each character\n3. Use Kahn's algorithm for topological sorting\n4. Start with characters having in-degree 0\n5. Process neighbors and reduce their in-degrees\n6. Return empty string if cycle detected (invalid order)\n\nTime complexity: O(C) where C is total number of characters\nSpace complexity: O(1) since alphabet is fixed size"
  }
}
