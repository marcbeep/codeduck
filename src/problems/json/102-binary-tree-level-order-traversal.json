{
  "id": 102,
  "title": "Binary Tree Level Order Traversal",
  "list": ["grind75", "neetcode150"],
  "category": "Trees",
  "difficulty": "Medium",
  "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
  "constraints": [
    "The number of nodes in the tree is in the range [0, 2000]",
    "-1000 <= Node.val <= 1000"
  ],
  "testCases": [
    {
      "input": {
        "root": [3, 9, 20, null, null, 15, 7]
      },
      "output": [[3], [9, 20], [15, 7]],
      "explanation": "Level 0: [3], Level 1: [9,20], Level 2: [15,7]"
    },
    {
      "input": {
        "root": [1]
      },
      "output": [[1]],
      "explanation": "Single node tree."
    },
    {
      "input": {
        "root": []
      },
      "output": [],
      "explanation": "Empty tree."
    }
  ],
  "solution": {
    "code": "from collections import deque\nfrom typing import Optional, List\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef level_order(root: Optional[TreeNode]) -> List[List[int]]:\n    if not root:\n        return []\n    \n    result = []\n    queue = deque([root])\n    \n    while queue:\n        level_size = len(queue)\n        current_level = []\n        \n        # Process all nodes at current level\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n            \n            # Add children to queue for next level\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        \n        result.append(current_level)\n    \n    return result",
    "explanation": "This solution uses BFS (Breadth-First Search):\n- Use a queue to implement BFS traversal\n- Process nodes level by level by tracking queue size\n- Collect all values at current level before moving to next\n- Time complexity: O(n) where n is the number of nodes\n- Space complexity: O(w) where w is the maximum width of the tree"
  }
}
