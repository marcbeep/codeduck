{
  "id": 207,
  "title": "Course Schedule",
  "list": [
    "grind75"
  ],
  "category": "Graph BFS",
  "difficulty": "Medium",
  "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\nReturn true if you can finish all courses. Otherwise, return false.",
  "constraints": [
    "1 <= numCourses <= 2000",
    "0 <= prerequisites.length <= 5000",
    "prerequisites[i].length == 2",
    "0 <= ai, bi < numCourses",
    "All the pairs prerequisites[i] are unique"
  ],
  "testCases": [
    {
      "input": {
        "numCourses": 2,
        "prerequisites": [
          [
            1,
            0
          ]
        ]
      },
      "output": true,
      "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible."
    },
    {
      "input": {
        "numCourses": 2,
        "prerequisites": [
          [
            1,
            0
          ],
          [
            0,
            1
          ]
        ]
      },
      "output": false,
      "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
    },
    {
      "input": {
        "numCourses": 4,
        "prerequisites": [
          [
            1,
            0
          ],
          [
            2,
            0
          ],
          [
            3,
            1
          ],
          [
            3,
            2
          ]
        ]
      },
      "output": true,
      "explanation": "One valid course order is: 0 -> 1 -> 2 -> 3"
    }
  ],
  "solution": {
    "code": "from collections import defaultdict, deque\n\ndef can_finish(num_courses: int, prerequisites: list[list[int]]) -> bool:\n    # Build adjacency list and in-degree count\n    graph = defaultdict(list)\n    in_degree = [0] * num_courses\n    \n    for course, prereq in prerequisites:\n        graph[prereq].append(course)\n        in_degree[course] += 1\n    \n    # Kahn's algorithm for topological sort\n    queue = deque()\n    \n    # Add all courses with no prerequisites\n    for course in range(num_courses):\n        if in_degree[course] == 0:\n            queue.append(course)\n    \n    courses_completed = 0\n    \n    while queue:\n        course = queue.popleft()\n        courses_completed += 1\n        \n        # Reduce in-degree for all dependent courses\n        for dependent in graph[course]:\n            in_degree[dependent] -= 1\n            if in_degree[dependent] == 0:\n                queue.append(dependent)\n    \n    return courses_completed == num_courses",
    "explanation": "This solution uses Kahn's algorithm (topological sort) with O(V + E) time complexity:\n1. We build an adjacency list representation of the graph and track in-degrees\n2. We use a queue to process courses with no remaining prerequisites\n3. For each completed course, we reduce the in-degree of its dependent courses\n4. If a course's in-degree becomes 0, we add it to the queue\n5. We can finish all courses if we complete exactly numCourses courses\n\nThe time complexity is O(V + E) where V is the number of courses and E is the number of prerequisites. The space complexity is O(V + E) for the graph representation.\n\nKey insights:\n- This is essentially detecting cycles in a directed graph\n- If there's a cycle, we can't complete all courses (circular dependency)\n- Kahn's algorithm naturally detects cycles - if we can't complete all courses, there's a cycle\n- We process courses in topological order (prerequisites before dependents)\n\nAlternative approach: We could also use DFS with cycle detection using a visited array with three states (unvisited, visiting, visited)."
  }
}
