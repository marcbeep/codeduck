{
  "id": 56,
  "title": "Merge Intervals",
  "list": ["grind75"],
  "category": "Intervals",
  "topics": ["Array", "Sorting"],
  "difficulty": "Medium",
  "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
  "constraints": [
    "1 <= intervals.length <= 104",
    "intervals[i].length == 2",
    "0 <= starti <= endi <= 104"
  ],
  "testCases": [
    {
      "input": {
        "intervals": [
          [1, 3],
          [2, 6],
          [8, 10],
          [15, 18]
        ]
      },
      "output": [
        [1, 6],
        [8, 10],
        [15, 18]
      ],
      "explanation": "Since intervals [1, 3] and [2, 6] overlap, merge them into [1, 6]."
    },
    {
      "input": {
        "intervals": [
          [1, 4],
          [4, 5]
        ]
      },
      "output": [[1, 5]],
      "explanation": "Intervals [1, 4] and [4, 5] are considered overlapping."
    },
    {
      "input": {
        "intervals": [
          [1, 4],
          [0, 4]
        ]
      },
      "output": [[0, 4]],
      "explanation": "Intervals [1, 4] and [0, 4] overlap and merge into [0, 4]."
    }
  ],
  "solution": {
    "code": "def merge(intervals: list[list[int]]) -> list[list[int]]:\n    # Sort intervals by start time\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = []\n    \n    for interval in intervals:\n        # If merged is empty or current interval doesn't overlap with last merged\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            # Merge the intervals by updating the end time\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    \n    return merged",
    "explanation": "This solution sorts the intervals first and then merges overlapping ones:\n1. Sort all intervals by their start time\n2. Initialize an empty result list\n3. For each interval, check if it overlaps with the last merged interval\n4. If no overlap, add the current interval to result\n5. If overlap exists, merge by updating the end time to the maximum of both\n\nThe time complexity is O(n log n) due to sorting. The space complexity is O(n) to store the result."
  }
}
