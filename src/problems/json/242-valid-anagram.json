{
  "id": 242,
  "title": "Valid Anagram",
  "list": ["grind75", "neetcode150"],
  "category": "Arrays & Hashing",
  "difficulty": "Easy",
  "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
  "constraints": [
    "1 <= s.length, t.length <= 5 * 104",
    "s and t consist of lowercase English letters"
  ],
  "testCases": [
    {
      "input": {
        "s": "anagram",
        "t": "nagaram"
      },
      "output": true,
      "explanation": "Both strings contain the same characters with the same frequencies."
    },
    {
      "input": {
        "s": "rat",
        "t": "car"
      },
      "output": false,
      "explanation": "The strings contain different characters."
    },
    {
      "input": {
        "s": "listen",
        "t": "silent"
      },
      "output": true,
      "explanation": "Both strings are anagrams of each other."
    },
    {
      "input": {
        "s": "hello",
        "t": "world"
      },
      "output": false,
      "explanation": "Different character frequencies."
    }
  ],
  "solution": {
    "code": "def is_anagram(s: str, t: str) -> bool:\n    # If lengths are different, they can't be anagrams\n    if len(s) != len(t):\n        return False\n    \n    # Count characters in both strings\n    char_count = {}\n    \n    # Count characters in string s\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Decrement counts for characters in string t\n    for char in t:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n        if char_count[char] < 0:\n            return False\n    \n    return True",
    "explanation": "Count characters in string s, then decrement counts for characters in string t. If any character is missing or has negative count, return False. Time: O(n). Space: O(k) where k is number of unique characters."
  }
}
