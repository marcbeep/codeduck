{
  "id": 739,
  "title": "Daily Temperatures",
  "list": ["neetcode150"],
  "category": "Stack",
  "difficulty": "Medium",
  "description": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.",
  "constraints": [
    "1 <= temperatures.length <= 105",
    "30 <= temperatures[i] <= 100"
  ],
  "testCases": [
    {
      "input": {
        "temperatures": [73, 74, 75, 71, 69, 72, 76, 73]
      },
      "output": [1, 1, 4, 2, 1, 1, 0, 0],
      "explanation": "For day 0: wait 1 day for warmer temperature (74). For day 1: wait 1 day for warmer temperature (75). For day 2: wait 4 days for warmer temperature (76). For day 3: wait 2 days for warmer temperature (72). For day 4: wait 1 day for warmer temperature (72). For day 5: wait 1 day for warmer temperature (76). For day 6: no warmer temperature ahead. For day 7: no warmer temperature ahead."
    },
    {
      "input": {
        "temperatures": [30, 40, 50, 60]
      },
      "output": [1, 1, 1, 0],
      "explanation": "Each day has a warmer temperature the next day, except the last day."
    },
    {
      "input": {
        "temperatures": [30, 60, 90]
      },
      "output": [1, 1, 0],
      "explanation": "Each day has a warmer temperature the next day, except the last day."
    }
  ],
  "solution": {
    "code": "def daily_temperatures(temperatures: list[int]) -> list[int]:\n    stack = []  # Stack to store indices\n    result = [0] * len(temperatures)\n    \n    for i, temp in enumerate(temperatures):\n        # While stack is not empty and current temperature is warmer than stack top\n        while stack and temperatures[stack[-1]] < temp:\n            # Pop the colder day and calculate waiting days\n            prev_day = stack.pop()\n            result[prev_day] = i - prev_day\n        \n        # Push current day to stack\n        stack.append(i)\n    \n    return result",
    "explanation": "This solution uses a monotonic stack:\n1. Use stack to keep track of indices of days with decreasing temperatures\n2. For each day, check if current temperature is warmer than temperature at stack top\n3. If warmer, pop colder day and calculate waiting days (current index - popped index)\n4. Continue popping until finding day with temperature >= current temperature\n5. Push current day's index onto stack\n\nKey insight: We only need to keep track of days with decreasing temperatures. When we find a warmer temperature, we can resolve all colder days that were waiting.\n\nTime complexity: O(n), Space complexity: O(n)"
  }
}
