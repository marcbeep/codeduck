{
  "id": 215,
  "title": "Kth Largest Element In An Array",
  "list": ["neetcode150"],
  "category": "Heap / Priority Queue",
  "difficulty": "Medium",
  "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\n\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\n\nCan you solve it without sorting?",
  "constraints": ["1 <= k <= nums.length <= 105", "-104 <= nums[i] <= 104"],
  "testCases": [
    {
      "input": {
        "nums": [3, 2, 1, 5, 6, 4],
        "k": 2
      },
      "output": 5,
      "explanation": "The 2nd largest element is 5."
    },
    {
      "input": {
        "nums": [3, 2, 3, 1, 2, 4, 5, 5, 6],
        "k": 4
      },
      "output": 4,
      "explanation": "The 4th largest element is 4."
    },
    {
      "input": {
        "nums": [1],
        "k": 1
      },
      "output": 1,
      "explanation": "The 1st largest element is 1."
    }
  ],
  "solution": {
    "code": "import heapq\n\ndef findKthLargest(nums, k):\n    # Use min heap to keep k largest elements\n    min_heap = []\n    \n    for num in nums:\n        heapq.heappush(min_heap, num)\n        # Keep only k largest elements\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # The kth largest is the smallest in the heap\n    return min_heap[0]",
    "explanation": "Use a min heap to keep the k largest elements:\n1. Iterate through all numbers\n2. Add each to min heap\n3. If heap size > k, remove smallest element\n4. Return smallest element in heap (kth largest)\n\nTime complexity: O(n log k), Space complexity: O(k)"
  }
}
