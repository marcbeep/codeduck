{
  "id": 1448,
  "title": "Count Good Nodes In Binary Tree",
  "list": ["neetcode150"],
  "category": "Trees",
  "difficulty": "Medium",
  "description": "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.\n\nReturn the number of good nodes in the binary tree.",
  "constraints": [
    "The number of nodes in the binary tree is in the range [1, 10^5]",
    "Each node's value is between [-10^4, 10^4]"
  ],
  "testCases": [
    {
      "input": {
        "root": [3, 1, 4, 3, null, 1, 5]
      },
      "output": 4,
      "explanation": "Nodes in blue are good. Root Node (3) is always a good node. Node 4 -> (3,4) is the maximum value in the path starting from the root. Node 5 -> (3,4,5) is the maximum value in the path. Node 3 -> (3,1,3) is the maximum value in the path."
    },
    {
      "input": {
        "root": [3, 3, null, 4, 2]
      },
      "output": 3,
      "explanation": "Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it."
    },
    {
      "input": {
        "root": [1]
      },
      "output": 1,
      "explanation": "Root is considered as good."
    },
    {
      "input": {
        "root": [9, null, 3, 6]
      },
      "output": 1,
      "explanation": "Only the root node is good since all other nodes have values less than 9."
    }
  ],
  "solution": {
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef goodNodes(root):\n    def dfs(node, max_val):\n        if not node:\n            return 0\n        \n        # Count current node if it's good\n        count = 1 if node.val >= max_val else 0\n        \n        # Update max_val for children\n        new_max = max(max_val, node.val)\n        \n        # Recursively count good nodes in left and right subtrees\n        count += dfs(node.left, new_max)\n        count += dfs(node.right, new_max)\n        \n        return count\n    \n    return dfs(root, float('-inf'))",
    "explanation": "This solution uses recursive DFS:\n- Keep track of maximum value seen in current path\n- Count nodes that are >= path maximum\n- Update path maximum for children\n- Time complexity: O(n) where n is the number of nodes\n- Space complexity: O(h) where h is the height of the tree"
  }
}
