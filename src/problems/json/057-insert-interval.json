{
  "id": 57,
  "title": "Insert Interval",
  "list": ["grind75"],
  "category": "Array",
  "topics": ["Array", "Sorting"],
  "difficulty": "Medium",
  "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn intervals after the insertion.",
  "constraints": [
    "0 <= intervals.length <= 104",
    "intervals[i].length == 2",
    "0 <= starti <= endi <= 105",
    "newInterval.length == 2",
    "0 <= start <= end <= 105"
  ],
  "testCases": [
    {
      "input": {
        "intervals": [
          [1, 3],
          [6, 9]
        ],
        "newInterval": [2, 5]
      },
      "output": [
        [1, 5],
        [6, 9]
      ],
      "explanation": "Interval [2,5] overlaps with [1,3], so we merge them into [1,5]."
    },
    {
      "input": {
        "intervals": [
          [1, 2],
          [3, 5],
          [6, 7],
          [8, 10],
          [12, 16]
        ],
        "newInterval": [4, 8]
      },
      "output": [
        [1, 2],
        [3, 10],
        [12, 16]
      ],
      "explanation": "Interval [4,8] overlaps with [3,5], [6,7], and [8,10], so we merge them into [3,10]."
    },
    {
      "input": {
        "intervals": [],
        "newInterval": [5, 7]
      },
      "output": [[5, 7]],
      "explanation": "Empty intervals array, so we just insert the new interval."
    }
  ],
  "solution": {
    "code": "def insert(intervals: list[list[int]], new_interval: list[int]) -> list[list[int]]:\n    result = []\n    i = 0\n    \n    # Add all intervals that come before new_interval\n    while i < len(intervals) and intervals[i][1] < new_interval[0]:\n        result.append(intervals[i])\n        i += 1\n    \n    # Merge overlapping intervals\n    while i < len(intervals) and intervals[i][0] <= new_interval[1]:\n        new_interval[0] = min(new_interval[0], intervals[i][0])\n        new_interval[1] = max(new_interval[1], intervals[i][1])\n        i += 1\n    \n    # Add the merged interval\n    result.append(new_interval)\n    \n    # Add all remaining intervals\n    while i < len(intervals):\n        result.append(intervals[i])\n        i += 1\n    \n    return result",
    "explanation": "This solution has O(n) time complexity and handles the insertion efficiently:\n1. First, we add all intervals that end before the new interval starts (no overlap)\n2. Then, we merge all overlapping intervals by updating the new interval's start and end\n3. Finally, we add the merged interval and all remaining intervals\n\nThe time complexity is O(n) as we only need one pass through the intervals array. The space complexity is O(n) to store the result.\n\nKey insights:\n- If an interval ends before new_interval starts, it comes before and doesn't overlap\n- If an interval starts before or at new_interval ends, it overlaps and needs merging\n- We merge by taking the minimum start and maximum end of all overlapping intervals"
  }
}
